/* automatically generated by rust-bindgen */

pub const __GNUC_VA_LIST: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const NAME_CHAR_LEN: u32 = 64;
pub const NAME_LEN: u32 = 256;
pub const HOSTNAME_LENGTH: u32 = 60;
pub const SYSTEM_MB_MAX_CHAR_LENGTH: u32 = 4;
pub const USERNAME_CHAR_LENGTH: u32 = 128;
pub const USERNAME_LENGTH: u32 = 512;
pub const SERVER_VERSION_LENGTH: u32 = 60;
pub const SQLSTATE_LENGTH: u32 = 5;
pub const SCRAMBLE_LENGTH: u32 = 20;
pub const SCRAMBLE_LENGTH_323: u32 = 8;
pub const LOCAL_HOST: &'static [u8; 10usize] = b"localhost\0";
pub const LOCAL_HOST_NAMEDPIPE: &'static [u8; 2usize] = b".\0";
pub const MYSQL_AUTODETECT_CHARSET_NAME: &'static [u8; 5usize] = b"auto\0";
pub const BINCMP_FLAG: u32 = 131072;
pub const NOT_NULL_FLAG: u32 = 1;
pub const PRI_KEY_FLAG: u32 = 2;
pub const UNIQUE_KEY_FLAG: u32 = 4;
pub const MULTIPLE_KEY_FLAG: u32 = 8;
pub const BLOB_FLAG: u32 = 16;
pub const UNSIGNED_FLAG: u32 = 32;
pub const ZEROFILL_FLAG: u32 = 64;
pub const BINARY_FLAG: u32 = 128;
pub const ENUM_FLAG: u32 = 256;
pub const AUTO_INCREMENT_FLAG: u32 = 512;
pub const TIMESTAMP_FLAG: u32 = 1024;
pub const SET_FLAG: u32 = 2048;
pub const NO_DEFAULT_VALUE_FLAG: u32 = 4096;
pub const ON_UPDATE_NOW_FLAG: u32 = 8192;
pub const NUM_FLAG: u32 = 32768;
pub const PART_KEY_FLAG: u32 = 16384;
pub const GROUP_FLAG: u32 = 32768;
pub const UNIQUE_FLAG: u32 = 65536;
pub const REFRESH_GRANT: u32 = 1;
pub const REFRESH_LOG: u32 = 2;
pub const REFRESH_TABLES: u32 = 4;
pub const REFRESH_HOSTS: u32 = 8;
pub const REFRESH_STATUS: u32 = 16;
pub const REFRESH_THREADS: u32 = 32;
pub const REFRESH_SLAVE: u32 = 64;
pub const REFRESH_MASTER: u32 = 128;
pub const REFRESH_READ_LOCK: u32 = 16384;
pub const REFRESH_FAST: u32 = 32768;
pub const CLIENT_MYSQL: u32 = 1;
pub const CLIENT_FOUND_ROWS: u32 = 2;
pub const CLIENT_LONG_FLAG: u32 = 4;
pub const CLIENT_CONNECT_WITH_DB: u32 = 8;
pub const CLIENT_NO_SCHEMA: u32 = 16;
pub const CLIENT_COMPRESS: u32 = 32;
pub const CLIENT_ODBC: u32 = 64;
pub const CLIENT_LOCAL_FILES: u32 = 128;
pub const CLIENT_IGNORE_SPACE: u32 = 256;
pub const CLIENT_INTERACTIVE: u32 = 1024;
pub const CLIENT_SSL: u32 = 2048;
pub const CLIENT_IGNORE_SIGPIPE: u32 = 4096;
pub const CLIENT_TRANSACTIONS: u32 = 8192;
pub const CLIENT_PROTOCOL_41: u32 = 512;
pub const CLIENT_RESERVED: u32 = 16384;
pub const CLIENT_SECURE_CONNECTION: u32 = 32768;
pub const CLIENT_MULTI_STATEMENTS: u32 = 65536;
pub const CLIENT_MULTI_RESULTS: u32 = 131072;
pub const CLIENT_PS_MULTI_RESULTS: u32 = 262144;
pub const CLIENT_PLUGIN_AUTH: u32 = 524288;
pub const CLIENT_CONNECT_ATTRS: u32 = 1048576;
pub const CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS: u32 = 4194304;
pub const CLIENT_SESSION_TRACKING: u32 = 8388608;
pub const CLIENT_PROGRESS: u32 = 536870912;
pub const CLIENT_PROGRESS_OBSOLETE: u32 = 536870912;
pub const CLIENT_SSL_VERIFY_SERVER_CERT: u32 = 1073741824;
pub const CLIENT_REMEMBER_OPTIONS: u32 = 2147483648;
pub const MARIADB_CLIENT_FLAGS: i64 = -4294967296;
pub const MARIADB_CLIENT_PROGRESS: u64 = 4294967296;
pub const MARIADB_CLIENT_COM_MULTI: u64 = 8589934592;
pub const MARIADB_CLIENT_STMT_BULK_OPERATIONS: u64 = 17179869184;
pub const MARIADB_CLIENT_EXTENDED_METADATA: u64 = 34359738368;
pub const MARIADB_CLIENT_SUPPORTED_FLAGS: u64 = 64424509440;
pub const CLIENT_SUPPORTED_FLAGS: u32 = 3768319999;
pub const CLIENT_CAPABILITIES: u32 = 10396165;
pub const CLIENT_DEFAULT_FLAGS: u32 = 3768317919;
pub const SERVER_STATUS_IN_TRANS: u32 = 1;
pub const SERVER_STATUS_AUTOCOMMIT: u32 = 2;
pub const SERVER_MORE_RESULTS_EXIST: u32 = 8;
pub const SERVER_QUERY_NO_GOOD_INDEX_USED: u32 = 16;
pub const SERVER_QUERY_NO_INDEX_USED: u32 = 32;
pub const SERVER_STATUS_CURSOR_EXISTS: u32 = 64;
pub const SERVER_STATUS_LAST_ROW_SENT: u32 = 128;
pub const SERVER_STATUS_DB_DROPPED: u32 = 256;
pub const SERVER_STATUS_NO_BACKSLASH_ESCAPES: u32 = 512;
pub const SERVER_STATUS_METADATA_CHANGED: u32 = 1024;
pub const SERVER_QUERY_WAS_SLOW: u32 = 2048;
pub const SERVER_PS_OUT_PARAMS: u32 = 4096;
pub const SERVER_STATUS_IN_TRANS_READONLY: u32 = 8192;
pub const SERVER_SESSION_STATE_CHANGED: u32 = 16384;
pub const SERVER_STATUS_ANSI_QUOTES: u32 = 32768;
pub const MYSQL_ERRMSG_SIZE: u32 = 512;
pub const NET_READ_TIMEOUT: u32 = 30;
pub const NET_WRITE_TIMEOUT: u32 = 60;
pub const NET_WAIT_TIMEOUT: u32 = 28800;
pub const LIST_PROCESS_HOST_LEN: u32 = 64;
pub const MYSQL50_TABLE_NAME_PREFIX: &'static [u8; 10usize] = b"#mysql50#\0";
pub const MAX_CHAR_WIDTH: u32 = 255;
pub const MAX_BLOB_WIDTH: u32 = 8192;
pub const MAX_TINYINT_WIDTH: u32 = 3;
pub const MAX_SMALLINT_WIDTH: u32 = 5;
pub const MAX_MEDIUMINT_WIDTH: u32 = 8;
pub const MAX_INT_WIDTH: u32 = 10;
pub const MAX_BIGINT_WIDTH: u32 = 20;
pub const SESSION_TRACK_BEGIN: u32 = 0;
pub const MARIADB_CONNECTION_UNIXSOCKET: u32 = 0;
pub const MARIADB_CONNECTION_TCP: u32 = 1;
pub const MARIADB_CONNECTION_NAMEDPIPE: u32 = 2;
pub const MARIADB_CONNECTION_SHAREDMEM: u32 = 3;
pub const NET_HEADER_SIZE: u32 = 4;
pub const COMP_HEADER_SIZE: u32 = 3;
pub const native_password_plugin_name: &'static [u8; 22usize] = b"mysql_native_password\0";
pub const old_password_plugin_name: &'static [u8; 19usize] = b"mysql_old_password\0";
pub const PROTOCOL_VERSION: u32 = 10;
pub const MARIADB_CLIENT_VERSION_STR: &'static [u8; 8usize] = b"10.3.25\0";
pub const MARIADB_BASE_VERSION: &'static [u8; 13usize] = b"mariadb-10.3\0";
pub const MARIADB_VERSION_ID: u32 = 100325;
pub const MARIADB_PORT: u32 = 3306;
pub const MARIADB_UNIX_ADDR: &'static [u8; 28usize] = b"/var/run/mysqld/mysqld.sock\0";
pub const MYSQL_CONFIG_NAME: &'static [u8; 3usize] = b"my\0";
pub const MYSQL_VERSION_ID: u32 = 100325;
pub const MYSQL_SERVER_VERSION: &'static [u8; 16usize] = b"10.3.25-MariaDB\0";
pub const MARIADB_PACKAGE_VERSION: &'static [u8; 6usize] = b"3.1.9\0";
pub const MARIADB_PACKAGE_VERSION_ID: u32 = 30109;
pub const MARIADB_SYSTEM_TYPE: &'static [u8; 6usize] = b"Linux\0";
pub const MARIADB_MACHINE_TYPE: &'static [u8; 7usize] = b"x86_64\0";
pub const MARIADB_PLUGINDIR: &'static [u8; 43usize] =
    b"/usr/lib/x86_64-linux-gnu/mariadb19/plugin\0";
pub const MYSQL_CHARSET: &'static [u8; 1usize] = b"\0";
pub const CC_SOURCE_REVISION: &'static [u8; 1usize] = b"\0";
pub const _CTYPE_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const CHARSET_DIR: &'static [u8; 10usize] = b"charsets/\0";
pub const MY_CS_NAME_SIZE: u32 = 32;
pub const MADB_DEFAULT_CHARSET_NAME: &'static [u8; 7usize] = b"latin1\0";
pub const MADB_DEFAULT_COLLATION_NAME: &'static [u8; 18usize] = b"latin1_swedish_ci\0";
pub const MADB_AUTODETECT_CHARSET_NAME: &'static [u8; 5usize] = b"auto\0";
pub const AUTO_SEC_PART_DIGITS: u32 = 39;
pub const SEC_PART_DIGITS: u32 = 6;
pub const MARIADB_INVALID_SOCKET: i32 = -1;
pub const MYSQL_WAIT_READ: u32 = 1;
pub const MYSQL_WAIT_WRITE: u32 = 2;
pub const MYSQL_WAIT_EXCEPT: u32 = 4;
pub const MYSQL_WAIT_TIMEOUT: u32 = 8;
pub const LOCAL_INFILE_ERROR_LEN: u32 = 512;
pub const MYSQL_NO_DATA: u32 = 100;
pub const MYSQL_DATA_TRUNCATED: u32 = 101;
pub const MADB_BIND_DUMMY: u32 = 1;
pub const MYSQL_PS_SKIP_RESULT_W_LEN: i32 = -1;
pub const MYSQL_PS_SKIP_RESULT_STR: i32 = -2;
pub const STMT_ID_LENGTH: u32 = 4;
pub const STMT_BULK_FLAG_CLIENT_SEND_TYPES: u32 = 128;
pub const STMT_BULK_FLAG_INSERT_ID_REQUEST: u32 = 64;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type my_bool = ::std::os::raw::c_char;
pub type my_ulonglong = ::std::os::raw::c_ulonglong;
pub type my_socket = ::std::os::raw::c_int;
pub const mysql_enum_shutdown_level_SHUTDOWN_DEFAULT: mysql_enum_shutdown_level = 0;
pub const mysql_enum_shutdown_level_KILL_QUERY: mysql_enum_shutdown_level = 254;
pub const mysql_enum_shutdown_level_KILL_CONNECTION: mysql_enum_shutdown_level = 255;
pub type mysql_enum_shutdown_level = u32;
pub const enum_server_command_COM_SLEEP: enum_server_command = 0;
pub const enum_server_command_COM_QUIT: enum_server_command = 1;
pub const enum_server_command_COM_INIT_DB: enum_server_command = 2;
pub const enum_server_command_COM_QUERY: enum_server_command = 3;
pub const enum_server_command_COM_FIELD_LIST: enum_server_command = 4;
pub const enum_server_command_COM_CREATE_DB: enum_server_command = 5;
pub const enum_server_command_COM_DROP_DB: enum_server_command = 6;
pub const enum_server_command_COM_REFRESH: enum_server_command = 7;
pub const enum_server_command_COM_SHUTDOWN: enum_server_command = 8;
pub const enum_server_command_COM_STATISTICS: enum_server_command = 9;
pub const enum_server_command_COM_PROCESS_INFO: enum_server_command = 10;
pub const enum_server_command_COM_CONNECT: enum_server_command = 11;
pub const enum_server_command_COM_PROCESS_KILL: enum_server_command = 12;
pub const enum_server_command_COM_DEBUG: enum_server_command = 13;
pub const enum_server_command_COM_PING: enum_server_command = 14;
pub const enum_server_command_COM_TIME: enum_server_command = 15;
pub const enum_server_command_COM_DELAYED_INSERT: enum_server_command = 16;
pub const enum_server_command_COM_CHANGE_USER: enum_server_command = 17;
pub const enum_server_command_COM_BINLOG_DUMP: enum_server_command = 18;
pub const enum_server_command_COM_TABLE_DUMP: enum_server_command = 19;
pub const enum_server_command_COM_CONNECT_OUT: enum_server_command = 20;
pub const enum_server_command_COM_REGISTER_SLAVE: enum_server_command = 21;
pub const enum_server_command_COM_STMT_PREPARE: enum_server_command = 22;
pub const enum_server_command_COM_STMT_EXECUTE: enum_server_command = 23;
pub const enum_server_command_COM_STMT_SEND_LONG_DATA: enum_server_command = 24;
pub const enum_server_command_COM_STMT_CLOSE: enum_server_command = 25;
pub const enum_server_command_COM_STMT_RESET: enum_server_command = 26;
pub const enum_server_command_COM_SET_OPTION: enum_server_command = 27;
pub const enum_server_command_COM_STMT_FETCH: enum_server_command = 28;
pub const enum_server_command_COM_DAEMON: enum_server_command = 29;
pub const enum_server_command_COM_UNSUPPORTED: enum_server_command = 30;
pub const enum_server_command_COM_RESET_CONNECTION: enum_server_command = 31;
pub const enum_server_command_COM_STMT_BULK_EXECUTE: enum_server_command = 250;
pub const enum_server_command_COM_MULTI: enum_server_command = 254;
pub const enum_server_command_COM_END: enum_server_command = 255;
pub type enum_server_command = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_ma_pvio {
    _unused: [u8; 0],
}
pub type MARIADB_PVIO = st_ma_pvio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_ma_connection_plugin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct st_net {
    pub pvio: *mut MARIADB_PVIO,
    pub buff: *mut ::std::os::raw::c_uchar,
    pub buff_end: *mut ::std::os::raw::c_uchar,
    pub write_pos: *mut ::std::os::raw::c_uchar,
    pub read_pos: *mut ::std::os::raw::c_uchar,
    pub fd: my_socket,
    pub remain_in_buf: ::std::os::raw::c_ulong,
    pub length: ::std::os::raw::c_ulong,
    pub buf_length: ::std::os::raw::c_ulong,
    pub where_b: ::std::os::raw::c_ulong,
    pub max_packet: ::std::os::raw::c_ulong,
    pub max_packet_size: ::std::os::raw::c_ulong,
    pub pkt_nr: ::std::os::raw::c_uint,
    pub compress_pkt_nr: ::std::os::raw::c_uint,
    pub write_timeout: ::std::os::raw::c_uint,
    pub read_timeout: ::std::os::raw::c_uint,
    pub retry_count: ::std::os::raw::c_uint,
    pub fcntl: ::std::os::raw::c_int,
    pub return_status: *mut ::std::os::raw::c_uint,
    pub reading_or_writing: ::std::os::raw::c_uchar,
    pub save_char: ::std::os::raw::c_char,
    pub unused_1: ::std::os::raw::c_char,
    pub unused_2: my_bool,
    pub compress: my_bool,
    pub unused_3: my_bool,
    pub unused_4: *mut ::std::os::raw::c_void,
    pub last_errno: ::std::os::raw::c_uint,
    pub error: ::std::os::raw::c_uchar,
    pub unused_5: my_bool,
    pub unused_6: my_bool,
    pub last_error: [::std::os::raw::c_char; 512usize],
    pub sqlstate: [::std::os::raw::c_char; 6usize],
    pub extension: *mut st_mariadb_net_extension,
}
#[test]
fn bindgen_test_layout_st_net() {
    assert_eq!(
        ::std::mem::size_of::<st_net>(),
        680usize,
        concat!("Size of: ", stringify!(st_net))
    );
    assert_eq!(
        ::std::mem::align_of::<st_net>(),
        8usize,
        concat!("Alignment of ", stringify!(st_net))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).pvio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(pvio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).buff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(buff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).buff_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(buff_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).write_pos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(write_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).read_pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(read_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).fd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).remain_in_buf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(remain_in_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).length as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).buf_length as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(buf_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).where_b as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(where_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).max_packet as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(max_packet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).max_packet_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(max_packet_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).pkt_nr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(pkt_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).compress_pkt_nr as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(compress_pkt_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).write_timeout as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(write_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).read_timeout as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(read_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).retry_count as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(retry_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).fcntl as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(fcntl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).return_status as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(return_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).reading_or_writing as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(reading_or_writing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).save_char as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(save_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).unused_1 as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(unused_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).unused_2 as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(unused_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).compress as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(compress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).unused_3 as *const _ as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(unused_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).unused_4 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(unused_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).last_errno as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(last_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).error as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).unused_5 as *const _ as usize },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(unused_5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).unused_6 as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(unused_6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).last_error as *const _ as usize },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(last_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).sqlstate as *const _ as usize },
        663usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(sqlstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_net>())).extension as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(st_net),
            "::",
            stringify!(extension)
        )
    );
}
pub type NET = st_net;
pub const enum_mysql_set_option_MYSQL_OPTION_MULTI_STATEMENTS_ON: enum_mysql_set_option = 0;
pub const enum_mysql_set_option_MYSQL_OPTION_MULTI_STATEMENTS_OFF: enum_mysql_set_option = 1;
pub type enum_mysql_set_option = u32;
pub const enum_session_state_type_SESSION_TRACK_SYSTEM_VARIABLES: enum_session_state_type = 0;
pub const enum_session_state_type_SESSION_TRACK_SCHEMA: enum_session_state_type = 1;
pub const enum_session_state_type_SESSION_TRACK_STATE_CHANGE: enum_session_state_type = 2;
pub const enum_session_state_type_SESSION_TRACK_GTIDS: enum_session_state_type = 3;
pub const enum_session_state_type_SESSION_TRACK_TRANSACTION_CHARACTERISTICS:
    enum_session_state_type = 4;
pub const enum_session_state_type_SESSION_TRACK_TRANSACTION_TYPE: enum_session_state_type = 5;
pub type enum_session_state_type = u32;
pub const enum_field_types_MYSQL_TYPE_DECIMAL: enum_field_types = 0;
pub const enum_field_types_MYSQL_TYPE_TINY: enum_field_types = 1;
pub const enum_field_types_MYSQL_TYPE_SHORT: enum_field_types = 2;
pub const enum_field_types_MYSQL_TYPE_LONG: enum_field_types = 3;
pub const enum_field_types_MYSQL_TYPE_FLOAT: enum_field_types = 4;
pub const enum_field_types_MYSQL_TYPE_DOUBLE: enum_field_types = 5;
pub const enum_field_types_MYSQL_TYPE_NULL: enum_field_types = 6;
pub const enum_field_types_MYSQL_TYPE_TIMESTAMP: enum_field_types = 7;
pub const enum_field_types_MYSQL_TYPE_LONGLONG: enum_field_types = 8;
pub const enum_field_types_MYSQL_TYPE_INT24: enum_field_types = 9;
pub const enum_field_types_MYSQL_TYPE_DATE: enum_field_types = 10;
pub const enum_field_types_MYSQL_TYPE_TIME: enum_field_types = 11;
pub const enum_field_types_MYSQL_TYPE_DATETIME: enum_field_types = 12;
pub const enum_field_types_MYSQL_TYPE_YEAR: enum_field_types = 13;
pub const enum_field_types_MYSQL_TYPE_NEWDATE: enum_field_types = 14;
pub const enum_field_types_MYSQL_TYPE_VARCHAR: enum_field_types = 15;
pub const enum_field_types_MYSQL_TYPE_BIT: enum_field_types = 16;
pub const enum_field_types_MYSQL_TYPE_TIMESTAMP2: enum_field_types = 17;
pub const enum_field_types_MYSQL_TYPE_DATETIME2: enum_field_types = 18;
pub const enum_field_types_MYSQL_TYPE_TIME2: enum_field_types = 19;
pub const enum_field_types_MYSQL_TYPE_JSON: enum_field_types = 245;
pub const enum_field_types_MYSQL_TYPE_NEWDECIMAL: enum_field_types = 246;
pub const enum_field_types_MYSQL_TYPE_ENUM: enum_field_types = 247;
pub const enum_field_types_MYSQL_TYPE_SET: enum_field_types = 248;
pub const enum_field_types_MYSQL_TYPE_TINY_BLOB: enum_field_types = 249;
pub const enum_field_types_MYSQL_TYPE_MEDIUM_BLOB: enum_field_types = 250;
pub const enum_field_types_MYSQL_TYPE_LONG_BLOB: enum_field_types = 251;
pub const enum_field_types_MYSQL_TYPE_BLOB: enum_field_types = 252;
pub const enum_field_types_MYSQL_TYPE_VAR_STRING: enum_field_types = 253;
pub const enum_field_types_MYSQL_TYPE_STRING: enum_field_types = 254;
pub const enum_field_types_MYSQL_TYPE_GEOMETRY: enum_field_types = 255;
pub const enum_field_types_MAX_NO_FIELD_TYPES: enum_field_types = 256;
pub type enum_field_types = u32;
extern "C" {
    pub static mut max_allowed_packet: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut net_buffer_length: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ma_net_init(net: *mut NET, pvio: *mut MARIADB_PVIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ma_net_end(net: *mut NET);
}
extern "C" {
    pub fn ma_net_clear(net: *mut NET);
}
extern "C" {
    pub fn ma_net_flush(net: *mut NET) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ma_net_write(
        net: *mut NET,
        packet: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ma_net_write_command(
        net: *mut NET,
        command: ::std::os::raw::c_uchar,
        packet: *const ::std::os::raw::c_char,
        len: size_t,
        disable_flush: my_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ma_net_real_write(
        net: *mut NET,
        packet: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ma_net_read(net: *mut NET) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rand_struct {
    pub seed1: ::std::os::raw::c_ulong,
    pub seed2: ::std::os::raw::c_ulong,
    pub max_value: ::std::os::raw::c_ulong,
    pub max_value_dbl: f64,
}
#[test]
fn bindgen_test_layout_rand_struct() {
    assert_eq!(
        ::std::mem::size_of::<rand_struct>(),
        32usize,
        concat!("Size of: ", stringify!(rand_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rand_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rand_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_struct>())).seed1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_struct),
            "::",
            stringify!(seed1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_struct>())).seed2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_struct),
            "::",
            stringify!(seed2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_struct>())).max_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_struct),
            "::",
            stringify!(max_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rand_struct>())).max_value_dbl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rand_struct),
            "::",
            stringify!(max_value_dbl)
        )
    );
}
pub const Item_result_STRING_RESULT: Item_result = 0;
pub const Item_result_REAL_RESULT: Item_result = 1;
pub const Item_result_INT_RESULT: Item_result = 2;
pub const Item_result_ROW_RESULT: Item_result = 3;
pub const Item_result_DECIMAL_RESULT: Item_result = 4;
pub type Item_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_udf_args {
    pub arg_count: ::std::os::raw::c_uint,
    pub arg_type: *mut Item_result,
    pub args: *mut *mut ::std::os::raw::c_char,
    pub lengths: *mut ::std::os::raw::c_ulong,
    pub maybe_null: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_st_udf_args() {
    assert_eq!(
        ::std::mem::size_of::<st_udf_args>(),
        40usize,
        concat!("Size of: ", stringify!(st_udf_args))
    );
    assert_eq!(
        ::std::mem::align_of::<st_udf_args>(),
        8usize,
        concat!("Alignment of ", stringify!(st_udf_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_args>())).arg_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_args),
            "::",
            stringify!(arg_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_args>())).arg_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_args),
            "::",
            stringify!(arg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_args>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_args),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_args>())).lengths as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_args),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_args>())).maybe_null as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_args),
            "::",
            stringify!(maybe_null)
        )
    );
}
pub type UDF_ARGS = st_udf_args;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_udf_init {
    pub maybe_null: my_bool,
    pub decimals: ::std::os::raw::c_uint,
    pub max_length: ::std::os::raw::c_uint,
    pub ptr: *mut ::std::os::raw::c_char,
    pub const_item: my_bool,
}
#[test]
fn bindgen_test_layout_st_udf_init() {
    assert_eq!(
        ::std::mem::size_of::<st_udf_init>(),
        32usize,
        concat!("Size of: ", stringify!(st_udf_init))
    );
    assert_eq!(
        ::std::mem::align_of::<st_udf_init>(),
        8usize,
        concat!("Alignment of ", stringify!(st_udf_init))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_init>())).maybe_null as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_init),
            "::",
            stringify!(maybe_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_init>())).decimals as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_init),
            "::",
            stringify!(decimals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_init>())).max_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_init),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_init>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_init),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_udf_init>())).const_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_udf_init),
            "::",
            stringify!(const_item)
        )
    );
}
pub type UDF_INIT = st_udf_init;
extern "C" {
    pub fn ma_scramble_323(
        to: *mut ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_scramble_41(
        buffer: *const ::std::os::raw::c_uchar,
        scramble: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ma_hash_password(
        result: *mut ::std::os::raw::c_ulong,
        password: *const ::std::os::raw::c_char,
        len: size_t,
    );
}
extern "C" {
    pub fn ma_make_scrambled_password(
        to: *mut ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mariadb_load_defaults(
        conf_file: *const ::std::os::raw::c_char,
        groups: *mut *const ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ma_thread_init() -> my_bool;
}
extern "C" {
    pub fn ma_thread_end();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_list {
    pub prev: *mut st_list,
    pub next: *mut st_list,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_st_list() {
    assert_eq!(
        ::std::mem::size_of::<st_list>(),
        24usize,
        concat!("Size of: ", stringify!(st_list))
    );
    assert_eq!(
        ::std::mem::align_of::<st_list>(),
        8usize,
        concat!("Alignment of ", stringify!(st_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_list>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_list>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_list>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_list),
            "::",
            stringify!(data)
        )
    );
}
pub type LIST = st_list;
pub type list_walk_action = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn list_add(root: *mut LIST, element: *mut LIST) -> *mut LIST;
}
extern "C" {
    pub fn list_delete(root: *mut LIST, element: *mut LIST) -> *mut LIST;
}
extern "C" {
    pub fn list_cons(data: *mut ::std::os::raw::c_void, root: *mut LIST) -> *mut LIST;
}
extern "C" {
    pub fn list_reverse(root: *mut LIST) -> *mut LIST;
}
extern "C" {
    pub fn list_free(root: *mut LIST, free_data: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn list_length(list: *mut LIST) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn list_walk(
        list: *mut LIST,
        action: list_walk_action,
        argument: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_charset_info_st {
    pub nr: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
    pub csname: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub dir: *const ::std::os::raw::c_char,
    pub codepage: ::std::os::raw::c_uint,
    pub encoding: *const ::std::os::raw::c_char,
    pub char_minlen: ::std::os::raw::c_uint,
    pub char_maxlen: ::std::os::raw::c_uint,
    pub mb_charlen: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
    >,
    pub mb_valid: ::std::option::Option<
        unsafe extern "C" fn(
            start: *const ::std::os::raw::c_char,
            end: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_uint,
    >,
}
#[test]
fn bindgen_test_layout_ma_charset_info_st() {
    assert_eq!(
        ::std::mem::size_of::<ma_charset_info_st>(),
        72usize,
        concat!("Size of: ", stringify!(ma_charset_info_st))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_charset_info_st>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_charset_info_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).csname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(csname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).dir as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).codepage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(codepage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).encoding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).char_minlen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(char_minlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).char_maxlen as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(char_maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).mb_charlen as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(mb_charlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ma_charset_info_st>())).mb_valid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ma_charset_info_st),
            "::",
            stringify!(mb_valid)
        )
    );
}
pub type MARIADB_CHARSET_INFO = ma_charset_info_st;
extern "C" {
    pub static mut mariadb_compiled_charsets: [MARIADB_CHARSET_INFO; 0usize];
}
extern "C" {
    pub static mut ma_default_charset_info: *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub static mut ma_charset_bin: *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub static mut ma_charset_latin1: *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub static mut ma_charset_utf8_general_ci: *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub static mut ma_charset_utf16le_general_ci: *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub fn find_compiled_charset(cs_number: ::std::os::raw::c_uint) -> *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub fn find_compiled_charset_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub fn mysql_cset_escape_quotes(
        cset: *const MARIADB_CHARSET_INFO,
        newstr: *mut ::std::os::raw::c_char,
        escapestr: *const ::std::os::raw::c_char,
        escapestr_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mysql_cset_escape_slashes(
        cset: *const MARIADB_CHARSET_INFO,
        newstr: *mut ::std::os::raw::c_char,
        escapestr: *const ::std::os::raw::c_char,
        escapestr_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn madb_get_os_character_set() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_ma_const_string {
    pub str: *const ::std::os::raw::c_char,
    pub length: size_t,
}
#[test]
fn bindgen_test_layout_st_ma_const_string() {
    assert_eq!(
        ::std::mem::size_of::<st_ma_const_string>(),
        16usize,
        concat!("Size of: ", stringify!(st_ma_const_string))
    );
    assert_eq!(
        ::std::mem::align_of::<st_ma_const_string>(),
        8usize,
        concat!("Alignment of ", stringify!(st_ma_const_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_const_string>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_const_string),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_const_string>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_const_string),
            "::",
            stringify!(length)
        )
    );
}
pub type MARIADB_CONST_STRING = st_ma_const_string;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_ma_used_mem {
    pub next: *mut st_ma_used_mem,
    pub left: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_st_ma_used_mem() {
    assert_eq!(
        ::std::mem::size_of::<st_ma_used_mem>(),
        24usize,
        concat!("Size of: ", stringify!(st_ma_used_mem))
    );
    assert_eq!(
        ::std::mem::align_of::<st_ma_used_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(st_ma_used_mem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_used_mem>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_used_mem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_used_mem>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_used_mem),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_used_mem>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_used_mem),
            "::",
            stringify!(size)
        )
    );
}
pub type MA_USED_MEM = st_ma_used_mem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_ma_mem_root {
    pub free: *mut MA_USED_MEM,
    pub used: *mut MA_USED_MEM,
    pub pre_alloc: *mut MA_USED_MEM,
    pub min_malloc: size_t,
    pub block_size: size_t,
    pub block_num: ::std::os::raw::c_uint,
    pub first_block_usage: ::std::os::raw::c_uint,
    pub error_handler: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_st_ma_mem_root() {
    assert_eq!(
        ::std::mem::size_of::<st_ma_mem_root>(),
        56usize,
        concat!("Size of: ", stringify!(st_ma_mem_root))
    );
    assert_eq!(
        ::std::mem::align_of::<st_ma_mem_root>(),
        8usize,
        concat!("Alignment of ", stringify!(st_ma_mem_root))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).free as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).pre_alloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(pre_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).min_malloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(min_malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).block_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).block_num as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(block_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_ma_mem_root>())).first_block_usage as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(first_block_usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_ma_mem_root>())).error_handler as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_ma_mem_root),
            "::",
            stringify!(error_handler)
        )
    );
}
pub type MA_MEM_ROOT = st_ma_mem_root;
extern "C" {
    pub static mut mysql_port: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut mysql_unix_port: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut mariadb_deinitialize_ssl: ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_field {
    pub name: *mut ::std::os::raw::c_char,
    pub org_name: *mut ::std::os::raw::c_char,
    pub table: *mut ::std::os::raw::c_char,
    pub org_table: *mut ::std::os::raw::c_char,
    pub db: *mut ::std::os::raw::c_char,
    pub catalog: *mut ::std::os::raw::c_char,
    pub def: *mut ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_ulong,
    pub max_length: ::std::os::raw::c_ulong,
    pub name_length: ::std::os::raw::c_uint,
    pub org_name_length: ::std::os::raw::c_uint,
    pub table_length: ::std::os::raw::c_uint,
    pub org_table_length: ::std::os::raw::c_uint,
    pub db_length: ::std::os::raw::c_uint,
    pub catalog_length: ::std::os::raw::c_uint,
    pub def_length: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub decimals: ::std::os::raw::c_uint,
    pub charsetnr: ::std::os::raw::c_uint,
    pub type_: enum_field_types,
    pub extension: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_st_mysql_field() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_field>(),
        128usize,
        concat!("Size of: ", stringify!(st_mysql_field))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_field>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).org_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(org_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).table as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).org_table as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(org_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).db as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).catalog as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(catalog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).def as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).length as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).max_length as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).name_length as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).org_name_length as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(org_name_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).table_length as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(table_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).org_table_length as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(org_table_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).db_length as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(db_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).catalog_length as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(catalog_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).def_length as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(def_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).flags as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).decimals as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(decimals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).charsetnr as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(charsetnr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).type_ as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_field>())).extension as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_field),
            "::",
            stringify!(extension)
        )
    );
}
pub type MYSQL_FIELD = st_mysql_field;
pub type MYSQL_ROW = *mut *mut ::std::os::raw::c_char;
pub type MYSQL_FIELD_OFFSET = ::std::os::raw::c_uint;
extern "C" {
    pub static mut SQLSTATE_UNKNOWN: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_rows {
    pub next: *mut st_mysql_rows,
    pub data: MYSQL_ROW,
    pub length: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_st_mysql_rows() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_rows>(),
        24usize,
        concat!("Size of: ", stringify!(st_mysql_rows))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_rows>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_rows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_rows>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_rows),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_rows>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_rows),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_rows>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_rows),
            "::",
            stringify!(length)
        )
    );
}
pub type MYSQL_ROWS = st_mysql_rows;
pub type MYSQL_ROW_OFFSET = *mut MYSQL_ROWS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_data {
    pub data: *mut MYSQL_ROWS,
    pub embedded_info: *mut ::std::os::raw::c_void,
    pub alloc: MA_MEM_ROOT,
    pub rows: ::std::os::raw::c_ulonglong,
    pub fields: ::std::os::raw::c_uint,
    pub extension: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_st_mysql_data() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_data>(),
        96usize,
        concat!("Size of: ", stringify!(st_mysql_data))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_data>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_data>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_data),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_data>())).embedded_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_data),
            "::",
            stringify!(embedded_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_data>())).alloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_data),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_data>())).rows as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_data),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_data>())).fields as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_data),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_data>())).extension as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_data),
            "::",
            stringify!(extension)
        )
    );
}
pub type MYSQL_DATA = st_mysql_data;
pub const mysql_option_MYSQL_OPT_CONNECT_TIMEOUT: mysql_option = 0;
pub const mysql_option_MYSQL_OPT_COMPRESS: mysql_option = 1;
pub const mysql_option_MYSQL_OPT_NAMED_PIPE: mysql_option = 2;
pub const mysql_option_MYSQL_INIT_COMMAND: mysql_option = 3;
pub const mysql_option_MYSQL_READ_DEFAULT_FILE: mysql_option = 4;
pub const mysql_option_MYSQL_READ_DEFAULT_GROUP: mysql_option = 5;
pub const mysql_option_MYSQL_SET_CHARSET_DIR: mysql_option = 6;
pub const mysql_option_MYSQL_SET_CHARSET_NAME: mysql_option = 7;
pub const mysql_option_MYSQL_OPT_LOCAL_INFILE: mysql_option = 8;
pub const mysql_option_MYSQL_OPT_PROTOCOL: mysql_option = 9;
pub const mysql_option_MYSQL_SHARED_MEMORY_BASE_NAME: mysql_option = 10;
pub const mysql_option_MYSQL_OPT_READ_TIMEOUT: mysql_option = 11;
pub const mysql_option_MYSQL_OPT_WRITE_TIMEOUT: mysql_option = 12;
pub const mysql_option_MYSQL_OPT_USE_RESULT: mysql_option = 13;
pub const mysql_option_MYSQL_OPT_USE_REMOTE_CONNECTION: mysql_option = 14;
pub const mysql_option_MYSQL_OPT_USE_EMBEDDED_CONNECTION: mysql_option = 15;
pub const mysql_option_MYSQL_OPT_GUESS_CONNECTION: mysql_option = 16;
pub const mysql_option_MYSQL_SET_CLIENT_IP: mysql_option = 17;
pub const mysql_option_MYSQL_SECURE_AUTH: mysql_option = 18;
pub const mysql_option_MYSQL_REPORT_DATA_TRUNCATION: mysql_option = 19;
pub const mysql_option_MYSQL_OPT_RECONNECT: mysql_option = 20;
pub const mysql_option_MYSQL_OPT_SSL_VERIFY_SERVER_CERT: mysql_option = 21;
pub const mysql_option_MYSQL_PLUGIN_DIR: mysql_option = 22;
pub const mysql_option_MYSQL_DEFAULT_AUTH: mysql_option = 23;
pub const mysql_option_MYSQL_OPT_BIND: mysql_option = 24;
pub const mysql_option_MYSQL_OPT_SSL_KEY: mysql_option = 25;
pub const mysql_option_MYSQL_OPT_SSL_CERT: mysql_option = 26;
pub const mysql_option_MYSQL_OPT_SSL_CA: mysql_option = 27;
pub const mysql_option_MYSQL_OPT_SSL_CAPATH: mysql_option = 28;
pub const mysql_option_MYSQL_OPT_SSL_CIPHER: mysql_option = 29;
pub const mysql_option_MYSQL_OPT_SSL_CRL: mysql_option = 30;
pub const mysql_option_MYSQL_OPT_SSL_CRLPATH: mysql_option = 31;
pub const mysql_option_MYSQL_OPT_CONNECT_ATTR_RESET: mysql_option = 32;
pub const mysql_option_MYSQL_OPT_CONNECT_ATTR_ADD: mysql_option = 33;
pub const mysql_option_MYSQL_OPT_CONNECT_ATTR_DELETE: mysql_option = 34;
pub const mysql_option_MYSQL_SERVER_PUBLIC_KEY: mysql_option = 35;
pub const mysql_option_MYSQL_ENABLE_CLEARTEXT_PLUGIN: mysql_option = 36;
pub const mysql_option_MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS: mysql_option = 37;
pub const mysql_option_MYSQL_OPT_SSL_ENFORCE: mysql_option = 38;
pub const mysql_option_MYSQL_OPT_MAX_ALLOWED_PACKET: mysql_option = 39;
pub const mysql_option_MYSQL_OPT_NET_BUFFER_LENGTH: mysql_option = 40;
pub const mysql_option_MYSQL_OPT_TLS_VERSION: mysql_option = 41;
pub const mysql_option_MYSQL_PROGRESS_CALLBACK: mysql_option = 5999;
pub const mysql_option_MYSQL_OPT_NONBLOCK: mysql_option = 6000;
pub const mysql_option_MYSQL_DATABASE_DRIVER: mysql_option = 7000;
pub const mysql_option_MARIADB_OPT_SSL_FP: mysql_option = 7001;
pub const mysql_option_MARIADB_OPT_SSL_FP_LIST: mysql_option = 7002;
pub const mysql_option_MARIADB_OPT_TLS_PASSPHRASE: mysql_option = 7003;
pub const mysql_option_MARIADB_OPT_TLS_CIPHER_STRENGTH: mysql_option = 7004;
pub const mysql_option_MARIADB_OPT_TLS_VERSION: mysql_option = 7005;
pub const mysql_option_MARIADB_OPT_TLS_PEER_FP: mysql_option = 7006;
pub const mysql_option_MARIADB_OPT_TLS_PEER_FP_LIST: mysql_option = 7007;
pub const mysql_option_MARIADB_OPT_CONNECTION_READ_ONLY: mysql_option = 7008;
pub const mysql_option_MYSQL_OPT_CONNECT_ATTRS: mysql_option = 7009;
pub const mysql_option_MARIADB_OPT_USERDATA: mysql_option = 7010;
pub const mysql_option_MARIADB_OPT_CONNECTION_HANDLER: mysql_option = 7011;
pub const mysql_option_MARIADB_OPT_PORT: mysql_option = 7012;
pub const mysql_option_MARIADB_OPT_UNIXSOCKET: mysql_option = 7013;
pub const mysql_option_MARIADB_OPT_PASSWORD: mysql_option = 7014;
pub const mysql_option_MARIADB_OPT_HOST: mysql_option = 7015;
pub const mysql_option_MARIADB_OPT_USER: mysql_option = 7016;
pub const mysql_option_MARIADB_OPT_SCHEMA: mysql_option = 7017;
pub const mysql_option_MARIADB_OPT_DEBUG: mysql_option = 7018;
pub const mysql_option_MARIADB_OPT_FOUND_ROWS: mysql_option = 7019;
pub const mysql_option_MARIADB_OPT_MULTI_RESULTS: mysql_option = 7020;
pub const mysql_option_MARIADB_OPT_MULTI_STATEMENTS: mysql_option = 7021;
pub const mysql_option_MARIADB_OPT_INTERACTIVE: mysql_option = 7022;
pub const mysql_option_MARIADB_OPT_PROXY_HEADER: mysql_option = 7023;
pub const mysql_option_MARIADB_OPT_IO_WAIT: mysql_option = 7024;
pub type mysql_option = u32;
pub const mariadb_value_MARIADB_CHARSET_ID: mariadb_value = 0;
pub const mariadb_value_MARIADB_CHARSET_NAME: mariadb_value = 1;
pub const mariadb_value_MARIADB_CLIENT_ERRORS: mariadb_value = 2;
pub const mariadb_value_MARIADB_CLIENT_VERSION: mariadb_value = 3;
pub const mariadb_value_MARIADB_CLIENT_VERSION_ID: mariadb_value = 4;
pub const mariadb_value_MARIADB_CONNECTION_ASYNC_TIMEOUT: mariadb_value = 5;
pub const mariadb_value_MARIADB_CONNECTION_ASYNC_TIMEOUT_MS: mariadb_value = 6;
pub const mariadb_value_MARIADB_CONNECTION_MARIADB_CHARSET_INFO: mariadb_value = 7;
pub const mariadb_value_MARIADB_CONNECTION_ERROR: mariadb_value = 8;
pub const mariadb_value_MARIADB_CONNECTION_ERROR_ID: mariadb_value = 9;
pub const mariadb_value_MARIADB_CONNECTION_HOST: mariadb_value = 10;
pub const mariadb_value_MARIADB_CONNECTION_INFO: mariadb_value = 11;
pub const mariadb_value_MARIADB_CONNECTION_PORT: mariadb_value = 12;
pub const mariadb_value_MARIADB_CONNECTION_PROTOCOL_VERSION_ID: mariadb_value = 13;
pub const mariadb_value_MARIADB_CONNECTION_PVIO_TYPE: mariadb_value = 14;
pub const mariadb_value_MARIADB_CONNECTION_SCHEMA: mariadb_value = 15;
pub const mariadb_value_MARIADB_CONNECTION_SERVER_TYPE: mariadb_value = 16;
pub const mariadb_value_MARIADB_CONNECTION_SERVER_VERSION: mariadb_value = 17;
pub const mariadb_value_MARIADB_CONNECTION_SERVER_VERSION_ID: mariadb_value = 18;
pub const mariadb_value_MARIADB_CONNECTION_SOCKET: mariadb_value = 19;
pub const mariadb_value_MARIADB_CONNECTION_SQLSTATE: mariadb_value = 20;
pub const mariadb_value_MARIADB_CONNECTION_SSL_CIPHER: mariadb_value = 21;
pub const mariadb_value_MARIADB_TLS_LIBRARY: mariadb_value = 22;
pub const mariadb_value_MARIADB_CONNECTION_TLS_VERSION: mariadb_value = 23;
pub const mariadb_value_MARIADB_CONNECTION_TLS_VERSION_ID: mariadb_value = 24;
pub const mariadb_value_MARIADB_CONNECTION_TYPE: mariadb_value = 25;
pub const mariadb_value_MARIADB_CONNECTION_UNIX_SOCKET: mariadb_value = 26;
pub const mariadb_value_MARIADB_CONNECTION_USER: mariadb_value = 27;
pub const mariadb_value_MARIADB_MAX_ALLOWED_PACKET: mariadb_value = 28;
pub const mariadb_value_MARIADB_NET_BUFFER_LENGTH: mariadb_value = 29;
pub const mariadb_value_MARIADB_CONNECTION_SERVER_STATUS: mariadb_value = 30;
pub const mariadb_value_MARIADB_CONNECTION_SERVER_CAPABILITIES: mariadb_value = 31;
pub const mariadb_value_MARIADB_CONNECTION_EXTENDED_SERVER_CAPABILITIES: mariadb_value = 32;
pub const mariadb_value_MARIADB_CONNECTION_CLIENT_CAPABILITIES: mariadb_value = 33;
pub type mariadb_value = u32;
pub const mysql_status_MYSQL_STATUS_READY: mysql_status = 0;
pub const mysql_status_MYSQL_STATUS_GET_RESULT: mysql_status = 1;
pub const mysql_status_MYSQL_STATUS_USE_RESULT: mysql_status = 2;
pub const mysql_status_MYSQL_STATUS_QUERY_SENT: mysql_status = 3;
pub const mysql_status_MYSQL_STATUS_SENDING_LOAD_DATA: mysql_status = 4;
pub const mysql_status_MYSQL_STATUS_FETCHING_DATA: mysql_status = 5;
pub const mysql_status_MYSQL_STATUS_NEXT_RESULT_PENDING: mysql_status = 6;
pub const mysql_status_MYSQL_STATUS_QUIT_SENT: mysql_status = 7;
pub const mysql_status_MYSQL_STATUS_STMT_RESULT: mysql_status = 8;
pub type mysql_status = u32;
pub const mysql_protocol_type_MYSQL_PROTOCOL_DEFAULT: mysql_protocol_type = 0;
pub const mysql_protocol_type_MYSQL_PROTOCOL_TCP: mysql_protocol_type = 1;
pub const mysql_protocol_type_MYSQL_PROTOCOL_SOCKET: mysql_protocol_type = 2;
pub const mysql_protocol_type_MYSQL_PROTOCOL_PIPE: mysql_protocol_type = 3;
pub const mysql_protocol_type_MYSQL_PROTOCOL_MEMORY: mysql_protocol_type = 4;
pub type mysql_protocol_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_options {
    pub connect_timeout: ::std::os::raw::c_uint,
    pub read_timeout: ::std::os::raw::c_uint,
    pub write_timeout: ::std::os::raw::c_uint,
    pub port: ::std::os::raw::c_uint,
    pub protocol: ::std::os::raw::c_uint,
    pub client_flag: ::std::os::raw::c_ulong,
    pub host: *mut ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_char,
    pub password: *mut ::std::os::raw::c_char,
    pub unix_socket: *mut ::std::os::raw::c_char,
    pub db: *mut ::std::os::raw::c_char,
    pub init_command: *mut st_dynamic_array,
    pub my_cnf_file: *mut ::std::os::raw::c_char,
    pub my_cnf_group: *mut ::std::os::raw::c_char,
    pub charset_dir: *mut ::std::os::raw::c_char,
    pub charset_name: *mut ::std::os::raw::c_char,
    pub ssl_key: *mut ::std::os::raw::c_char,
    pub ssl_cert: *mut ::std::os::raw::c_char,
    pub ssl_ca: *mut ::std::os::raw::c_char,
    pub ssl_capath: *mut ::std::os::raw::c_char,
    pub ssl_cipher: *mut ::std::os::raw::c_char,
    pub shared_memory_base_name: *mut ::std::os::raw::c_char,
    pub max_allowed_packet: ::std::os::raw::c_ulong,
    pub use_ssl: my_bool,
    pub compress: my_bool,
    pub named_pipe: my_bool,
    pub reconnect: my_bool,
    pub unused_1: my_bool,
    pub unused_2: my_bool,
    pub unused_3: my_bool,
    pub methods_to_use: mysql_option,
    pub bind_address: *mut ::std::os::raw::c_char,
    pub secure_auth: my_bool,
    pub report_data_truncation: my_bool,
    pub local_infile_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub local_infile_read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub local_infile_end:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub local_infile_error: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub local_infile_userdata: *mut ::std::os::raw::c_void,
    pub extension: *mut st_mysql_options_extension,
}
#[test]
fn bindgen_test_layout_st_mysql_options() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_options>(),
        248usize,
        concat!("Size of: ", stringify!(st_mysql_options))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_options>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).connect_timeout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(connect_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).read_timeout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(read_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).write_timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(write_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).port as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).protocol as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).client_flag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(client_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).host as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).user as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).password as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).unix_socket as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(unix_socket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).db as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).init_command as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(init_command)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).my_cnf_file as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(my_cnf_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).my_cnf_group as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(my_cnf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).charset_dir as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(charset_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).charset_name as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(charset_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).ssl_key as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(ssl_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).ssl_cert as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(ssl_cert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).ssl_ca as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(ssl_ca)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).ssl_capath as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(ssl_capath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).ssl_cipher as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(ssl_cipher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).shared_memory_base_name as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(shared_memory_base_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).max_allowed_packet as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(max_allowed_packet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).use_ssl as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(use_ssl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).compress as *const _ as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(compress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).named_pipe as *const _ as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(named_pipe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).reconnect as *const _ as usize },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(reconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).unused_1 as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(unused_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).unused_2 as *const _ as usize },
        173usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(unused_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).unused_3 as *const _ as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(unused_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).methods_to_use as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(methods_to_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).bind_address as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(bind_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).secure_auth as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(secure_auth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).report_data_truncation as *const _ as usize
        },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(report_data_truncation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).local_infile_init as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(local_infile_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).local_infile_read as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(local_infile_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).local_infile_end as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(local_infile_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).local_infile_error as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(local_infile_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_options>())).local_infile_userdata as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(local_infile_userdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_options>())).extension as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_options),
            "::",
            stringify!(extension)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct st_mysql {
    pub net: NET,
    pub unused_0: *mut ::std::os::raw::c_void,
    pub host: *mut ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_char,
    pub passwd: *mut ::std::os::raw::c_char,
    pub unix_socket: *mut ::std::os::raw::c_char,
    pub server_version: *mut ::std::os::raw::c_char,
    pub host_info: *mut ::std::os::raw::c_char,
    pub info: *mut ::std::os::raw::c_char,
    pub db: *mut ::std::os::raw::c_char,
    pub charset: *const ma_charset_info_st,
    pub fields: *mut MYSQL_FIELD,
    pub field_alloc: MA_MEM_ROOT,
    pub affected_rows: ::std::os::raw::c_ulonglong,
    pub insert_id: ::std::os::raw::c_ulonglong,
    pub extra_info: ::std::os::raw::c_ulonglong,
    pub thread_id: ::std::os::raw::c_ulong,
    pub packet_length: ::std::os::raw::c_ulong,
    pub port: ::std::os::raw::c_uint,
    pub client_flag: ::std::os::raw::c_ulong,
    pub server_capabilities: ::std::os::raw::c_ulong,
    pub protocol_version: ::std::os::raw::c_uint,
    pub field_count: ::std::os::raw::c_uint,
    pub server_status: ::std::os::raw::c_uint,
    pub server_language: ::std::os::raw::c_uint,
    pub warning_count: ::std::os::raw::c_uint,
    pub options: st_mysql_options,
    pub status: mysql_status,
    pub free_me: my_bool,
    pub unused_1: my_bool,
    pub scramble_buff: [::std::os::raw::c_char; 21usize],
    pub unused_2: my_bool,
    pub unused_3: *mut ::std::os::raw::c_void,
    pub unused_4: *mut ::std::os::raw::c_void,
    pub unused_5: *mut ::std::os::raw::c_void,
    pub unused_6: *mut ::std::os::raw::c_void,
    pub stmts: *mut LIST,
    pub methods: *const st_mariadb_methods,
    pub thd: *mut ::std::os::raw::c_void,
    pub unbuffered_fetch_owner: *mut my_bool,
    pub info_buffer: *mut ::std::os::raw::c_char,
    pub extension: *mut st_mariadb_extension,
}
#[test]
fn bindgen_test_layout_st_mysql() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql>(),
        1272usize,
        concat!("Size of: ", stringify!(st_mysql))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).net as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(net)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_0 as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).host as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).user as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).passwd as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unix_socket as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unix_socket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).server_version as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(server_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).host_info as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(host_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).info as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).db as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).charset as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).fields as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).field_alloc as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(field_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).affected_rows as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(affected_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).insert_id as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(insert_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).extra_info as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(extra_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).thread_id as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).packet_length as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(packet_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).port as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).client_flag as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(client_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).server_capabilities as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(server_capabilities)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).protocol_version as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(protocol_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).field_count as *const _ as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).server_status as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(server_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).server_language as *const _ as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(server_language)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).warning_count as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(warning_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).options as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).status as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).free_me as *const _ as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(free_me)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_1 as *const _ as usize },
        1165usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).scramble_buff as *const _ as usize },
        1166usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(scramble_buff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_2 as *const _ as usize },
        1187usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_3 as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_4 as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_5 as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unused_6 as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unused_6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).stmts as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(stmts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).methods as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).thd as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(thd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).unbuffered_fetch_owner as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(unbuffered_fetch_owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).info_buffer as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(info_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql>())).extension as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql),
            "::",
            stringify!(extension)
        )
    );
}
pub type MYSQL = st_mysql;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_res {
    pub row_count: ::std::os::raw::c_ulonglong,
    pub field_count: ::std::os::raw::c_uint,
    pub current_field: ::std::os::raw::c_uint,
    pub fields: *mut MYSQL_FIELD,
    pub data: *mut MYSQL_DATA,
    pub data_cursor: *mut MYSQL_ROWS,
    pub field_alloc: MA_MEM_ROOT,
    pub row: MYSQL_ROW,
    pub current_row: MYSQL_ROW,
    pub lengths: *mut ::std::os::raw::c_ulong,
    pub handle: *mut MYSQL,
    pub eof: my_bool,
    pub is_ps: my_bool,
}
#[test]
fn bindgen_test_layout_st_mysql_res() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_res>(),
        136usize,
        concat!("Size of: ", stringify!(st_mysql_res))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_res>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_res))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).row_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(row_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).field_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).current_field as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(current_field)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).fields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).data_cursor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(data_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).field_alloc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(field_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).row as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).current_row as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(current_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).lengths as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).handle as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).eof as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_res>())).is_ps as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_res),
            "::",
            stringify!(is_ps)
        )
    );
}
pub type MYSQL_RES = st_mysql_res;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MYSQL_PARAMETERS {
    pub p_max_allowed_packet: *mut ::std::os::raw::c_ulong,
    pub p_net_buffer_length: *mut ::std::os::raw::c_ulong,
    pub extension: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MYSQL_PARAMETERS() {
    assert_eq!(
        ::std::mem::size_of::<MYSQL_PARAMETERS>(),
        24usize,
        concat!("Size of: ", stringify!(MYSQL_PARAMETERS))
    );
    assert_eq!(
        ::std::mem::align_of::<MYSQL_PARAMETERS>(),
        8usize,
        concat!("Alignment of ", stringify!(MYSQL_PARAMETERS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MYSQL_PARAMETERS>())).p_max_allowed_packet as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MYSQL_PARAMETERS),
            "::",
            stringify!(p_max_allowed_packet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MYSQL_PARAMETERS>())).p_net_buffer_length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MYSQL_PARAMETERS),
            "::",
            stringify!(p_net_buffer_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MYSQL_PARAMETERS>())).extension as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MYSQL_PARAMETERS),
            "::",
            stringify!(extension)
        )
    );
}
pub const mariadb_field_attr_t_MARIADB_FIELD_ATTR_DATA_TYPE_NAME: mariadb_field_attr_t = 0;
pub const mariadb_field_attr_t_MARIADB_FIELD_ATTR_FORMAT_NAME: mariadb_field_attr_t = 1;
pub type mariadb_field_attr_t = u32;
extern "C" {
    pub fn mariadb_field_attr(
        attr: *mut MARIADB_CONST_STRING,
        field: *const MYSQL_FIELD,
        type_: mariadb_field_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub const enum_mysql_timestamp_type_MYSQL_TIMESTAMP_NONE: enum_mysql_timestamp_type = -2;
pub const enum_mysql_timestamp_type_MYSQL_TIMESTAMP_ERROR: enum_mysql_timestamp_type = -1;
pub const enum_mysql_timestamp_type_MYSQL_TIMESTAMP_DATE: enum_mysql_timestamp_type = 0;
pub const enum_mysql_timestamp_type_MYSQL_TIMESTAMP_DATETIME: enum_mysql_timestamp_type = 1;
pub const enum_mysql_timestamp_type_MYSQL_TIMESTAMP_TIME: enum_mysql_timestamp_type = 2;
pub type enum_mysql_timestamp_type = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_time {
    pub year: ::std::os::raw::c_uint,
    pub month: ::std::os::raw::c_uint,
    pub day: ::std::os::raw::c_uint,
    pub hour: ::std::os::raw::c_uint,
    pub minute: ::std::os::raw::c_uint,
    pub second: ::std::os::raw::c_uint,
    pub second_part: ::std::os::raw::c_ulong,
    pub neg: my_bool,
    pub time_type: enum_mysql_timestamp_type,
}
#[test]
fn bindgen_test_layout_st_mysql_time() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_time>(),
        40usize,
        concat!("Size of: ", stringify!(st_mysql_time))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_time>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).day as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).hour as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).minute as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).second as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).second_part as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(second_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).neg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_time>())).time_type as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_time),
            "::",
            stringify!(time_type)
        )
    );
}
pub type MYSQL_TIME = st_mysql_time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct character_set {
    pub number: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
    pub csname: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub comment: *const ::std::os::raw::c_char,
    pub dir: *const ::std::os::raw::c_char,
    pub mbminlen: ::std::os::raw::c_uint,
    pub mbmaxlen: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_character_set() {
    assert_eq!(
        ::std::mem::size_of::<character_set>(),
        48usize,
        concat!("Size of: ", stringify!(character_set))
    );
    assert_eq!(
        ::std::mem::align_of::<character_set>(),
        8usize,
        concat!("Alignment of ", stringify!(character_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).csname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(csname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).comment as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).dir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).mbminlen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(mbminlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<character_set>())).mbmaxlen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(character_set),
            "::",
            stringify!(mbmaxlen)
        )
    );
}
pub type MY_CHARSET_INFO = character_set;
pub type MYSQL_STMT = st_mysql_stmt;
pub type mysql_stmt_use_or_store_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut MYSQL_STMT) -> *mut MYSQL_RES>;
pub const enum_stmt_attr_type_STMT_ATTR_UPDATE_MAX_LENGTH: enum_stmt_attr_type = 0;
pub const enum_stmt_attr_type_STMT_ATTR_CURSOR_TYPE: enum_stmt_attr_type = 1;
pub const enum_stmt_attr_type_STMT_ATTR_PREFETCH_ROWS: enum_stmt_attr_type = 2;
pub const enum_stmt_attr_type_STMT_ATTR_PREBIND_PARAMS: enum_stmt_attr_type = 200;
pub const enum_stmt_attr_type_STMT_ATTR_ARRAY_SIZE: enum_stmt_attr_type = 201;
pub const enum_stmt_attr_type_STMT_ATTR_ROW_SIZE: enum_stmt_attr_type = 202;
pub const enum_stmt_attr_type_STMT_ATTR_STATE: enum_stmt_attr_type = 203;
pub const enum_stmt_attr_type_STMT_ATTR_CB_USER_DATA: enum_stmt_attr_type = 204;
pub const enum_stmt_attr_type_STMT_ATTR_CB_PARAM: enum_stmt_attr_type = 205;
pub const enum_stmt_attr_type_STMT_ATTR_CB_RESULT: enum_stmt_attr_type = 206;
pub type enum_stmt_attr_type = u32;
pub const enum_cursor_type_CURSOR_TYPE_NO_CURSOR: enum_cursor_type = 0;
pub const enum_cursor_type_CURSOR_TYPE_READ_ONLY: enum_cursor_type = 1;
pub const enum_cursor_type_CURSOR_TYPE_FOR_UPDATE: enum_cursor_type = 2;
pub const enum_cursor_type_CURSOR_TYPE_SCROLLABLE: enum_cursor_type = 4;
pub type enum_cursor_type = u32;
pub const enum_indicator_type_STMT_INDICATOR_NTS: enum_indicator_type = -1;
pub const enum_indicator_type_STMT_INDICATOR_NONE: enum_indicator_type = 0;
pub const enum_indicator_type_STMT_INDICATOR_NULL: enum_indicator_type = 1;
pub const enum_indicator_type_STMT_INDICATOR_DEFAULT: enum_indicator_type = 2;
pub const enum_indicator_type_STMT_INDICATOR_IGNORE: enum_indicator_type = 3;
pub const enum_indicator_type_STMT_INDICATOR_IGNORE_ROW: enum_indicator_type = 4;
pub type enum_indicator_type = i32;
pub const mysql_stmt_state_MYSQL_STMT_INITTED: mysql_stmt_state = 0;
pub const mysql_stmt_state_MYSQL_STMT_PREPARED: mysql_stmt_state = 1;
pub const mysql_stmt_state_MYSQL_STMT_EXECUTED: mysql_stmt_state = 2;
pub const mysql_stmt_state_MYSQL_STMT_WAITING_USE_OR_STORE: mysql_stmt_state = 3;
pub const mysql_stmt_state_MYSQL_STMT_USE_OR_STORE_CALLED: mysql_stmt_state = 4;
pub const mysql_stmt_state_MYSQL_STMT_USER_FETCHING: mysql_stmt_state = 5;
pub const mysql_stmt_state_MYSQL_STMT_FETCH_DONE: mysql_stmt_state = 6;
pub type mysql_stmt_state = u32;
pub use self::mysql_stmt_state as enum_mysqlnd_stmt_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct st_mysql_bind {
    pub length: *mut ::std::os::raw::c_ulong,
    pub is_null: *mut my_bool,
    pub buffer: *mut ::std::os::raw::c_void,
    pub error: *mut my_bool,
    pub u: st_mysql_bind__bindgen_ty_1,
    pub store_param_func:
        ::std::option::Option<unsafe extern "C" fn(net: *mut NET, param: *mut st_mysql_bind)>,
    pub fetch_result: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_mysql_bind,
            arg2: *mut MYSQL_FIELD,
            row: *mut *mut ::std::os::raw::c_uchar,
        ),
    >,
    pub skip_result: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_mysql_bind,
            arg2: *mut MYSQL_FIELD,
            row: *mut *mut ::std::os::raw::c_uchar,
        ),
    >,
    pub buffer_length: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
    pub length_value: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_uint,
    pub pack_length: ::std::os::raw::c_uint,
    pub buffer_type: enum_field_types,
    pub error_value: my_bool,
    pub is_unsigned: my_bool,
    pub long_data_used: my_bool,
    pub is_null_value: my_bool,
    pub extension: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union st_mysql_bind__bindgen_ty_1 {
    pub row_ptr: *mut ::std::os::raw::c_uchar,
    pub indicator: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_st_mysql_bind__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_bind__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(st_mysql_bind__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_bind__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_bind__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_bind__bindgen_ty_1>())).row_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind__bindgen_ty_1),
            "::",
            stringify!(row_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_bind__bindgen_ty_1>())).indicator as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind__bindgen_ty_1),
            "::",
            stringify!(indicator)
        )
    );
}
#[test]
fn bindgen_test_layout_st_mysql_bind() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_bind>(),
        112usize,
        concat!("Size of: ", stringify!(st_mysql_bind))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_bind>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_bind))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).is_null as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(is_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).store_param_func as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(store_param_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).fetch_result as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(fetch_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).skip_result as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(skip_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).buffer_length as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).offset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).length_value as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(length_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).flags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).pack_length as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(pack_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).buffer_type as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(buffer_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).error_value as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(error_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).is_unsigned as *const _ as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(is_unsigned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).long_data_used as *const _ as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(long_data_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).is_null_value as *const _ as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(is_null_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_bind>())).extension as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_bind),
            "::",
            stringify!(extension)
        )
    );
}
pub type MYSQL_BIND = st_mysql_bind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysqlnd_upsert_result {
    pub warning_count: ::std::os::raw::c_uint,
    pub server_status: ::std::os::raw::c_uint,
    pub affected_rows: ::std::os::raw::c_ulonglong,
    pub last_insert_id: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_st_mysqlnd_upsert_result() {
    assert_eq!(
        ::std::mem::size_of::<st_mysqlnd_upsert_result>(),
        24usize,
        concat!("Size of: ", stringify!(st_mysqlnd_upsert_result))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysqlnd_upsert_result>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysqlnd_upsert_result))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_upsert_result>())).warning_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_upsert_result),
            "::",
            stringify!(warning_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_upsert_result>())).server_status as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_upsert_result),
            "::",
            stringify!(server_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_upsert_result>())).affected_rows as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_upsert_result),
            "::",
            stringify!(affected_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_upsert_result>())).last_insert_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_upsert_result),
            "::",
            stringify!(last_insert_id)
        )
    );
}
pub type mysql_upsert_status = st_mysqlnd_upsert_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_cmd_buffer {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub length: size_t,
}
#[test]
fn bindgen_test_layout_st_mysql_cmd_buffer() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_cmd_buffer>(),
        16usize,
        concat!("Size of: ", stringify!(st_mysql_cmd_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_cmd_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_cmd_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_cmd_buffer>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_cmd_buffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_cmd_buffer>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_cmd_buffer),
            "::",
            stringify!(length)
        )
    );
}
pub type MYSQL_CMD_BUFFER = st_mysql_cmd_buffer;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct st_mysql_error_info {
    pub error_no: ::std::os::raw::c_uint,
    pub error: [::std::os::raw::c_char; 513usize],
    pub sqlstate: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout_st_mysql_error_info() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_error_info>(),
        524usize,
        concat!("Size of: ", stringify!(st_mysql_error_info))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_error_info>(),
        4usize,
        concat!("Alignment of ", stringify!(st_mysql_error_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_error_info>())).error_no as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_error_info),
            "::",
            stringify!(error_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_error_info>())).error as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_error_info),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_error_info>())).sqlstate as *const _ as usize },
        517usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_error_info),
            "::",
            stringify!(sqlstate)
        )
    );
}
pub type mysql_error_info = st_mysql_error_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysqlnd_stmt_methods {
    pub prepare: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *const MYSQL_STMT,
            query: *const ::std::os::raw::c_char,
            query_len: size_t,
        ) -> my_bool,
    >,
    pub execute: ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> my_bool>,
    pub use_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *mut MYSQL_RES>,
    pub store_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *mut MYSQL_RES>,
    pub get_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *mut MYSQL_RES>,
    pub free_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> my_bool>,
    pub seek_data: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT, row: ::std::os::raw::c_ulonglong) -> my_bool,
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> my_bool>,
    pub close: ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> my_bool>,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> my_bool>,
    pub fetch: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT, fetched_anything: *mut my_bool) -> my_bool,
    >,
    pub bind_param: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT, bind: MYSQL_BIND) -> my_bool,
    >,
    pub refresh_bind_param:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> my_bool>,
    pub bind_result: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT, bind: *const MYSQL_BIND) -> my_bool,
    >,
    pub send_long_data: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *const MYSQL_STMT,
            param_num: ::std::os::raw::c_uint,
            data: *const ::std::os::raw::c_char,
            length: size_t,
        ) -> my_bool,
    >,
    pub get_parameter_metadata:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *mut MYSQL_RES>,
    pub get_result_metadata:
        ::std::option::Option<unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *mut MYSQL_RES>,
    pub get_last_insert_id: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_ulonglong,
    >,
    pub get_affected_rows: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_ulonglong,
    >,
    pub get_num_rows: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_ulonglong,
    >,
    pub get_param_count: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_uint,
    >,
    pub get_field_count: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_uint,
    >,
    pub get_warning_count: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_uint,
    >,
    pub get_error_no: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> ::std::os::raw::c_uint,
    >,
    pub get_error_str: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *const ::std::os::raw::c_char,
    >,
    pub get_sqlstate: ::std::option::Option<
        unsafe extern "C" fn(stmt: *const MYSQL_STMT) -> *const ::std::os::raw::c_char,
    >,
    pub get_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *const MYSQL_STMT,
            attr_type: enum_stmt_attr_type,
            value: *const ::std::os::raw::c_void,
        ) -> my_bool,
    >,
    pub set_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *const MYSQL_STMT,
            attr_type: enum_stmt_attr_type,
            value: *const ::std::os::raw::c_void,
        ) -> my_bool,
    >,
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            error_nr: ::std::os::raw::c_uint,
            sqlstate: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ),
    >,
}
#[test]
fn bindgen_test_layout_st_mysqlnd_stmt_methods() {
    assert_eq!(
        ::std::mem::size_of::<st_mysqlnd_stmt_methods>(),
        232usize,
        concat!("Size of: ", stringify!(st_mysqlnd_stmt_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysqlnd_stmt_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysqlnd_stmt_methods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).prepare as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(prepare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).execute as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(execute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).use_result as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(use_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).store_result as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(store_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_result as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).free_result as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(free_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).seek_data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(seek_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).reset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).close as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).dtor as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).fetch as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(fetch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).bind_param as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(bind_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).refresh_bind_param as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(refresh_bind_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).bind_result as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(bind_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).send_long_data as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(send_long_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_parameter_metadata as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_parameter_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_result_metadata as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_result_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_last_insert_id as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_last_insert_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_affected_rows as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_affected_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_num_rows as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_num_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_param_count as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_param_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_field_count as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_field_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_warning_count as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_warning_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_error_no as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_error_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_error_str as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_error_str)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_sqlstate as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_sqlstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).get_attribute as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(get_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).set_attribute as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(set_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysqlnd_stmt_methods>())).set_error as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysqlnd_stmt_methods),
            "::",
            stringify!(set_error)
        )
    );
}
pub type mysql_stmt_fetch_row_func = ::std::option::Option<
    unsafe extern "C" fn(
        stmt: *mut MYSQL_STMT,
        row: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type ps_result_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        column: ::std::os::raw::c_uint,
        row: *mut *mut ::std::os::raw::c_uchar,
    ),
>;
pub type ps_param_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        bind: *mut MYSQL_BIND,
        row_nr: ::std::os::raw::c_uint,
    ) -> *mut my_bool,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct st_mysql_stmt {
    pub mem_root: MA_MEM_ROOT,
    pub mysql: *mut MYSQL,
    pub stmt_id: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
    pub state: enum_mysqlnd_stmt_state,
    pub fields: *mut MYSQL_FIELD,
    pub field_count: ::std::os::raw::c_uint,
    pub param_count: ::std::os::raw::c_uint,
    pub send_types_to_server: ::std::os::raw::c_uchar,
    pub params: *mut MYSQL_BIND,
    pub bind: *mut MYSQL_BIND,
    pub result: MYSQL_DATA,
    pub result_cursor: *mut MYSQL_ROWS,
    pub bind_result_done: my_bool,
    pub bind_param_done: my_bool,
    pub upsert_status: mysql_upsert_status,
    pub last_errno: ::std::os::raw::c_uint,
    pub last_error: [::std::os::raw::c_char; 513usize],
    pub sqlstate: [::std::os::raw::c_char; 6usize],
    pub update_max_length: my_bool,
    pub prefetch_rows: ::std::os::raw::c_ulong,
    pub list: LIST,
    pub cursor_exists: my_bool,
    pub extension: *mut ::std::os::raw::c_void,
    pub fetch_row_func: mysql_stmt_fetch_row_func,
    pub execute_count: ::std::os::raw::c_uint,
    pub default_rset_handler: mysql_stmt_use_or_store_func,
    pub m: *mut st_mysqlnd_stmt_methods,
    pub array_size: ::std::os::raw::c_uint,
    pub row_size: size_t,
    pub prebind_params: ::std::os::raw::c_uint,
    pub user_data: *mut ::std::os::raw::c_void,
    pub result_callback: ps_result_callback,
    pub param_callback: ps_param_callback,
}
#[test]
fn bindgen_test_layout_st_mysql_stmt() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_stmt>(),
        920usize,
        concat!("Size of: ", stringify!(st_mysql_stmt))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_stmt>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_stmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).mem_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(mem_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).mysql as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(mysql)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).stmt_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(stmt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).state as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).fields as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).field_count as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).param_count as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(param_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_stmt>())).send_types_to_server as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(send_types_to_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).params as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).bind as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(bind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).result as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).result_cursor as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(result_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).bind_result_done as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(bind_result_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).bind_param_done as *const _ as usize },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(bind_param_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).upsert_status as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(upsert_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).last_errno as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(last_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).last_error as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(last_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).sqlstate as *const _ as usize },
        781usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(sqlstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).update_max_length as *const _ as usize },
        787usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(update_max_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).prefetch_rows as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(prefetch_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).list as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).cursor_exists as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(cursor_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).extension as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).fetch_row_func as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(fetch_row_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).execute_count as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(execute_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_stmt>())).default_rset_handler as *const _ as usize
        },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(default_rset_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).m as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).array_size as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(array_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).row_size as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(row_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).prebind_params as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(prebind_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).user_data as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).result_callback as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(result_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_stmt>())).param_callback as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_stmt),
            "::",
            stringify!(param_callback)
        )
    );
}
pub type ps_field_fetch_func = ::std::option::Option<
    unsafe extern "C" fn(
        r_param: *mut MYSQL_BIND,
        field: *const MYSQL_FIELD,
        row: *mut *mut ::std::os::raw::c_uchar,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_perm_bind {
    pub func: ps_field_fetch_func,
    pub pack_len: ::std::os::raw::c_int,
    pub max_len: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_st_mysql_perm_bind() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_perm_bind>(),
        24usize,
        concat!("Size of: ", stringify!(st_mysql_perm_bind))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_perm_bind>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_perm_bind))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_perm_bind>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_perm_bind),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_perm_bind>())).pack_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_perm_bind),
            "::",
            stringify!(pack_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_perm_bind>())).max_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_perm_bind),
            "::",
            stringify!(max_len)
        )
    );
}
pub type MYSQL_PS_CONVERSION = st_mysql_perm_bind;
extern "C" {
    pub static mut mysql_ps_fetch_functions: [MYSQL_PS_CONVERSION; 256usize];
}
extern "C" {
    pub fn ma_net_safe_read(mysql: *mut MYSQL) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_init_ps_subsystem();
}
extern "C" {
    pub fn net_field_length(packet: *mut *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ma_simple_command(
        mysql: *mut MYSQL,
        command: enum_server_command,
        arg: *const ::std::os::raw::c_char,
        length: size_t,
        skipp_check: my_bool,
        opt_arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_init(mysql: *mut MYSQL) -> *mut MYSQL_STMT;
}
extern "C" {
    pub fn mysql_stmt_prepare(
        stmt: *mut MYSQL_STMT,
        query: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_execute(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_fetch(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_fetch_column(
        stmt: *mut MYSQL_STMT,
        bind_arg: *mut MYSQL_BIND,
        column: ::std::os::raw::c_uint,
        offset: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_store_result(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_param_count(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_stmt_attr_set(
        stmt: *mut MYSQL_STMT,
        attr_type: enum_stmt_attr_type,
        attr: *const ::std::os::raw::c_void,
    ) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_attr_get(
        stmt: *mut MYSQL_STMT,
        attr_type: enum_stmt_attr_type,
        attr: *mut ::std::os::raw::c_void,
    ) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_bind_param(stmt: *mut MYSQL_STMT, bnd: *mut MYSQL_BIND) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_bind_result(stmt: *mut MYSQL_STMT, bnd: *mut MYSQL_BIND) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_close(stmt: *mut MYSQL_STMT) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_reset(stmt: *mut MYSQL_STMT) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_free_result(stmt: *mut MYSQL_STMT) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_send_long_data(
        stmt: *mut MYSQL_STMT,
        param_number: ::std::os::raw::c_uint,
        data: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> my_bool;
}
extern "C" {
    pub fn mysql_stmt_result_metadata(stmt: *mut MYSQL_STMT) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_stmt_param_metadata(stmt: *mut MYSQL_STMT) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_stmt_errno(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_stmt_error(stmt: *mut MYSQL_STMT) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_stmt_sqlstate(stmt: *mut MYSQL_STMT) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_stmt_row_seek(stmt: *mut MYSQL_STMT, offset: MYSQL_ROW_OFFSET)
        -> MYSQL_ROW_OFFSET;
}
extern "C" {
    pub fn mysql_stmt_row_tell(stmt: *mut MYSQL_STMT) -> MYSQL_ROW_OFFSET;
}
extern "C" {
    pub fn mysql_stmt_data_seek(stmt: *mut MYSQL_STMT, offset: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn mysql_stmt_num_rows(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mysql_stmt_affected_rows(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mysql_stmt_insert_id(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mysql_stmt_field_count(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_stmt_next_result(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_more_results(stmt: *mut MYSQL_STMT) -> my_bool;
}
extern "C" {
    pub fn mariadb_stmt_execute_direct(
        stmt: *mut MYSQL_STMT,
        stmt_str: *const ::std::os::raw::c_char,
        length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mariadb_stmt_fetch_fields(stmt: *mut MYSQL_STMT) -> *mut MYSQL_FIELD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_client_plugin {
    pub type_: ::std::os::raw::c_int,
    pub interface_version: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub version: [::std::os::raw::c_uint; 3usize],
    pub license: *const ::std::os::raw::c_char,
    pub mariadb_api: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: size_t,
            arg3: ::std::os::raw::c_int,
            arg4: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >,
    pub deinit: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub options: ::std::option::Option<
        unsafe extern "C" fn(
            option: *const ::std::os::raw::c_char,
            arg1: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_st_mysql_client_plugin() {
    assert_eq!(
        ::std::mem::size_of::<st_mysql_client_plugin>(),
        88usize,
        concat!("Size of: ", stringify!(st_mysql_client_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mysql_client_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mysql_client_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_client_plugin>())).interface_version as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(interface_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).author as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).desc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).version as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).license as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mysql_client_plugin>())).mariadb_api as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(mariadb_api)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).init as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).deinit as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(deinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mysql_client_plugin>())).options as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mysql_client_plugin),
            "::",
            stringify!(options)
        )
    );
}
extern "C" {
    pub fn mysql_load_plugin(
        mysql: *mut st_mysql,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        argc: ::std::os::raw::c_int,
        ...
    ) -> *mut st_mysql_client_plugin;
}
extern "C" {
    pub fn mysql_load_plugin_v(
        mysql: *mut st_mysql,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        argc: ::std::os::raw::c_int,
        args: *mut __va_list_tag,
    ) -> *mut st_mysql_client_plugin;
}
extern "C" {
    pub fn mysql_client_find_plugin(
        mysql: *mut st_mysql,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut st_mysql_client_plugin;
}
extern "C" {
    pub fn mysql_client_register_plugin(
        mysql: *mut st_mysql,
        plugin: *mut st_mysql_client_plugin,
    ) -> *mut st_mysql_client_plugin;
}
extern "C" {
    pub fn mysql_set_local_infile_handler(
        mysql: *mut MYSQL,
        local_infile_init: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        local_infile_read: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_int,
        >,
        local_infile_end: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        local_infile_error: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_int,
        >,
        arg1: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mysql_set_local_infile_default(mysql: *mut MYSQL);
}
extern "C" {
    pub fn my_set_error(
        mysql: *mut MYSQL,
        error_nr: ::std::os::raw::c_uint,
        sqlstate: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn mysql_num_rows(res: *mut MYSQL_RES) -> my_ulonglong;
}
extern "C" {
    pub fn mysql_num_fields(res: *mut MYSQL_RES) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_eof(res: *mut MYSQL_RES) -> my_bool;
}
extern "C" {
    pub fn mysql_fetch_field_direct(
        res: *mut MYSQL_RES,
        fieldnr: ::std::os::raw::c_uint,
    ) -> *mut MYSQL_FIELD;
}
extern "C" {
    pub fn mysql_fetch_fields(res: *mut MYSQL_RES) -> *mut MYSQL_FIELD;
}
extern "C" {
    pub fn mysql_row_tell(res: *mut MYSQL_RES) -> *mut MYSQL_ROWS;
}
extern "C" {
    pub fn mysql_field_tell(res: *mut MYSQL_RES) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_field_count(mysql: *mut MYSQL) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_more_results(mysql: *mut MYSQL) -> my_bool;
}
extern "C" {
    pub fn mysql_next_result(mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_affected_rows(mysql: *mut MYSQL) -> my_ulonglong;
}
extern "C" {
    pub fn mysql_autocommit(mysql: *mut MYSQL, mode: my_bool) -> my_bool;
}
extern "C" {
    pub fn mysql_commit(mysql: *mut MYSQL) -> my_bool;
}
extern "C" {
    pub fn mysql_rollback(mysql: *mut MYSQL) -> my_bool;
}
extern "C" {
    pub fn mysql_insert_id(mysql: *mut MYSQL) -> my_ulonglong;
}
extern "C" {
    pub fn mysql_errno(mysql: *mut MYSQL) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_error(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_info(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_thread_id(mysql: *mut MYSQL) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_character_set_name(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_get_character_set_info(mysql: *mut MYSQL, cs: *mut MY_CHARSET_INFO);
}
extern "C" {
    pub fn mysql_set_character_set(
        mysql: *mut MYSQL,
        csname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mariadb_get_infov(
        mysql: *mut MYSQL,
        value: mariadb_value,
        arg: *mut ::std::os::raw::c_void,
        ...
    ) -> my_bool;
}
extern "C" {
    pub fn mariadb_get_info(
        mysql: *mut MYSQL,
        value: mariadb_value,
        arg: *mut ::std::os::raw::c_void,
    ) -> my_bool;
}
extern "C" {
    pub fn mysql_init(mysql: *mut MYSQL) -> *mut MYSQL;
}
extern "C" {
    pub fn mysql_ssl_set(
        mysql: *mut MYSQL,
        key: *const ::std::os::raw::c_char,
        cert: *const ::std::os::raw::c_char,
        ca: *const ::std::os::raw::c_char,
        capath: *const ::std::os::raw::c_char,
        cipher: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_get_ssl_cipher(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_change_user(
        mysql: *mut MYSQL,
        user: *const ::std::os::raw::c_char,
        passwd: *const ::std::os::raw::c_char,
        db: *const ::std::os::raw::c_char,
    ) -> my_bool;
}
extern "C" {
    pub fn mysql_real_connect(
        mysql: *mut MYSQL,
        host: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        passwd: *const ::std::os::raw::c_char,
        db: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_uint,
        unix_socket: *const ::std::os::raw::c_char,
        clientflag: ::std::os::raw::c_ulong,
    ) -> *mut MYSQL;
}
extern "C" {
    pub fn mysql_close(sock: *mut MYSQL);
}
extern "C" {
    pub fn mysql_select_db(
        mysql: *mut MYSQL,
        db: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_query(
        mysql: *mut MYSQL,
        q: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_send_query(
        mysql: *mut MYSQL,
        q: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_read_query_result(mysql: *mut MYSQL) -> my_bool;
}
extern "C" {
    pub fn mysql_real_query(
        mysql: *mut MYSQL,
        q: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_shutdown(
        mysql: *mut MYSQL,
        shutdown_level: mysql_enum_shutdown_level,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_dump_debug_info(mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_refresh(
        mysql: *mut MYSQL,
        refresh_options: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_kill(mysql: *mut MYSQL, pid: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_ping(mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stat(mysql: *mut MYSQL) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_get_server_info(mysql: *mut MYSQL) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_get_server_version(mysql: *mut MYSQL) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_get_host_info(mysql: *mut MYSQL) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_get_proto_info(mysql: *mut MYSQL) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_list_dbs(mysql: *mut MYSQL, wild: *const ::std::os::raw::c_char)
        -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_list_tables(
        mysql: *mut MYSQL,
        wild: *const ::std::os::raw::c_char,
    ) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_list_fields(
        mysql: *mut MYSQL,
        table: *const ::std::os::raw::c_char,
        wild: *const ::std::os::raw::c_char,
    ) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_list_processes(mysql: *mut MYSQL) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_store_result(mysql: *mut MYSQL) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_use_result(mysql: *mut MYSQL) -> *mut MYSQL_RES;
}
extern "C" {
    pub fn mysql_options(
        mysql: *mut MYSQL,
        option: mysql_option,
        arg: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_options4(
        mysql: *mut MYSQL,
        option: mysql_option,
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_free_result(result: *mut MYSQL_RES);
}
extern "C" {
    pub fn mysql_data_seek(result: *mut MYSQL_RES, offset: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn mysql_row_seek(result: *mut MYSQL_RES, arg1: MYSQL_ROW_OFFSET) -> MYSQL_ROW_OFFSET;
}
extern "C" {
    pub fn mysql_field_seek(
        result: *mut MYSQL_RES,
        offset: MYSQL_FIELD_OFFSET,
    ) -> MYSQL_FIELD_OFFSET;
}
extern "C" {
    pub fn mysql_fetch_row(result: *mut MYSQL_RES) -> MYSQL_ROW;
}
extern "C" {
    pub fn mysql_fetch_lengths(result: *mut MYSQL_RES) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_fetch_field(result: *mut MYSQL_RES) -> *mut MYSQL_FIELD;
}
extern "C" {
    pub fn mysql_escape_string(
        to: *mut ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        from_length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_real_escape_string(
        mysql: *mut MYSQL,
        to: *mut ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_thread_safe() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_warning_count(mysql: *mut MYSQL) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_sqlstate(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_server_init(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        groups: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_server_end();
}
extern "C" {
    pub fn mysql_thread_end();
}
extern "C" {
    pub fn mysql_thread_init() -> my_bool;
}
extern "C" {
    pub fn mysql_set_server_option(
        mysql: *mut MYSQL,
        option: enum_mysql_set_option,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_get_client_info() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mysql_get_client_version() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mariadb_connection(mysql: *mut MYSQL) -> my_bool;
}
extern "C" {
    pub fn mysql_get_server_name(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mariadb_get_charset_by_name(
        csname: *const ::std::os::raw::c_char,
    ) -> *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub fn mariadb_get_charset_by_nr(csnr: ::std::os::raw::c_uint) -> *mut MARIADB_CHARSET_INFO;
}
extern "C" {
    pub fn mariadb_convert_string(
        from: *const ::std::os::raw::c_char,
        from_len: *mut size_t,
        from_cs: *mut MARIADB_CHARSET_INFO,
        to: *mut ::std::os::raw::c_char,
        to_len: *mut size_t,
        to_cs: *mut MARIADB_CHARSET_INFO,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn mysql_optionsv(mysql: *mut MYSQL, option: mysql_option, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_get_optionv(
        mysql: *mut MYSQL,
        option: mysql_option,
        arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_get_option(
        mysql: *mut MYSQL,
        option: mysql_option,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_hex_string(
        to: *mut ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_get_socket(mysql: *mut MYSQL) -> my_socket;
}
extern "C" {
    pub fn mysql_get_timeout_value(mysql: *const MYSQL) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mysql_get_timeout_value_ms(mysql: *const MYSQL) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mariadb_reconnect(mysql: *mut MYSQL) -> my_bool;
}
extern "C" {
    pub fn mariadb_cancel(mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_debug(debug: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mysql_net_read_packet(mysql: *mut MYSQL) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_net_field_length(
        packet: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mysql_embedded() -> my_bool;
}
extern "C" {
    pub fn mysql_get_parameters() -> *mut MYSQL_PARAMETERS;
}
extern "C" {
    pub fn mysql_close_start(sock: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_close_cont(
        sock: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_commit_start(ret: *mut my_bool, mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_commit_cont(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_dump_debug_info_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        ready_status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_dump_debug_info_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_rollback_start(ret: *mut my_bool, mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_rollback_cont(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_autocommit_start(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        auto_mode: my_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_list_fields_cont(
        ret: *mut *mut MYSQL_RES,
        mysql: *mut MYSQL,
        ready_status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_list_fields_start(
        ret: *mut *mut MYSQL_RES,
        mysql: *mut MYSQL,
        table: *const ::std::os::raw::c_char,
        wild: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_autocommit_cont(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_next_result_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_next_result_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_select_db_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        db: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_select_db_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        ready_status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_warning_count(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_next_result_start(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_next_result_cont(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_set_character_set_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        csname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_set_character_set_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_change_user_start(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        user: *const ::std::os::raw::c_char,
        passwd: *const ::std::os::raw::c_char,
        db: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_change_user_cont(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_real_connect_start(
        ret: *mut *mut MYSQL,
        mysql: *mut MYSQL,
        host: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        passwd: *const ::std::os::raw::c_char,
        db: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_uint,
        unix_socket: *const ::std::os::raw::c_char,
        clientflag: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_real_connect_cont(
        ret: *mut *mut MYSQL,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_query_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        q: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_query_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_send_query_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        q: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_send_query_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_real_query_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        q: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_real_query_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_store_result_start(
        ret: *mut *mut MYSQL_RES,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_store_result_cont(
        ret: *mut *mut MYSQL_RES,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_shutdown_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        shutdown_level: mysql_enum_shutdown_level,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_shutdown_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_refresh_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        refresh_options: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_refresh_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_kill_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        pid: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_kill_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_set_server_option_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        option: enum_mysql_set_option,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_set_server_option_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_ping_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_ping_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stat_start(
        ret: *mut *const ::std::os::raw::c_char,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stat_cont(
        ret: *mut *const ::std::os::raw::c_char,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_free_result_start(result: *mut MYSQL_RES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_free_result_cont(
        result: *mut MYSQL_RES,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_fetch_row_start(
        ret: *mut MYSQL_ROW,
        result: *mut MYSQL_RES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_fetch_row_cont(
        ret: *mut MYSQL_ROW,
        result: *mut MYSQL_RES,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_read_query_result_start(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_read_query_result_cont(
        ret: *mut my_bool,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_reset_connection_start(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_reset_connection_cont(
        ret: *mut ::std::os::raw::c_int,
        mysql: *mut MYSQL,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_session_track_get_next(
        mysql: *mut MYSQL,
        type_: enum_session_state_type,
        data: *mut *const ::std::os::raw::c_char,
        length: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_session_track_get_first(
        mysql: *mut MYSQL,
        type_: enum_session_state_type,
        data: *mut *const ::std::os::raw::c_char,
        length: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_prepare_start(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
        query: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_prepare_cont(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_execute_start(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_execute_cont(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_fetch_start(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_fetch_cont(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_store_result_start(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_store_result_cont(
        ret: *mut ::std::os::raw::c_int,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_close_start(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_close_cont(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_reset_start(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_reset_cont(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_free_result_start(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_free_result_cont(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_send_long_data_start(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
        param_number: ::std::os::raw::c_uint,
        data: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_stmt_send_long_data_cont(
        ret: *mut my_bool,
        stmt: *mut MYSQL_STMT,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mysql_reset_connection(mysql: *mut MYSQL) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mariadb_api {
    pub mysql_num_rows: ::std::option::Option<
        unsafe extern "C" fn(res: *mut MYSQL_RES) -> ::std::os::raw::c_ulonglong,
    >,
    pub mysql_num_fields:
        ::std::option::Option<unsafe extern "C" fn(res: *mut MYSQL_RES) -> ::std::os::raw::c_uint>,
    pub mysql_eof: ::std::option::Option<unsafe extern "C" fn(res: *mut MYSQL_RES) -> my_bool>,
    pub mysql_fetch_field_direct: ::std::option::Option<
        unsafe extern "C" fn(
            res: *mut MYSQL_RES,
            fieldnr: ::std::os::raw::c_uint,
        ) -> *mut MYSQL_FIELD,
    >,
    pub mysql_fetch_fields:
        ::std::option::Option<unsafe extern "C" fn(res: *mut MYSQL_RES) -> *mut MYSQL_FIELD>,
    pub mysql_row_tell:
        ::std::option::Option<unsafe extern "C" fn(res: *mut MYSQL_RES) -> *mut MYSQL_ROWS>,
    pub mysql_field_tell:
        ::std::option::Option<unsafe extern "C" fn(res: *mut MYSQL_RES) -> ::std::os::raw::c_uint>,
    pub mysql_field_count:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_uint>,
    pub mysql_more_results:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_bool>,
    pub mysql_next_result:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_int>,
    pub mysql_affected_rows: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_ulonglong,
    >,
    pub mysql_autocommit:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL, mode: my_bool) -> my_bool>,
    pub mysql_commit: ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_bool>,
    pub mysql_rollback: ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_bool>,
    pub mysql_insert_id: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_ulonglong,
    >,
    pub mysql_errno:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_uint>,
    pub mysql_error: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_info: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_thread_id:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_ulong>,
    pub mysql_character_set_name: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_get_character_set_info:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL, cs: *mut MY_CHARSET_INFO)>,
    pub mysql_set_character_set: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            csname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mariadb_get_infov: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            value: mariadb_value,
            arg: *mut ::std::os::raw::c_void,
            ...
        ) -> my_bool,
    >,
    pub mariadb_get_info: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            value: mariadb_value,
            arg: *mut ::std::os::raw::c_void,
        ) -> my_bool,
    >,
    pub mysql_init: ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut MYSQL>,
    pub mysql_ssl_set: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            key: *const ::std::os::raw::c_char,
            cert: *const ::std::os::raw::c_char,
            ca: *const ::std::os::raw::c_char,
            capath: *const ::std::os::raw::c_char,
            cipher: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_get_ssl_cipher: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_change_user: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            user: *const ::std::os::raw::c_char,
            passwd: *const ::std::os::raw::c_char,
            db: *const ::std::os::raw::c_char,
        ) -> my_bool,
    >,
    pub mysql_real_connect: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            host: *const ::std::os::raw::c_char,
            user: *const ::std::os::raw::c_char,
            passwd: *const ::std::os::raw::c_char,
            db: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_uint,
            unix_socket: *const ::std::os::raw::c_char,
            clientflag: ::std::os::raw::c_ulong,
        ) -> *mut MYSQL,
    >,
    pub mysql_close: ::std::option::Option<unsafe extern "C" fn(sock: *mut MYSQL)>,
    pub mysql_select_db: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            db: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_query: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            q: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_send_query: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            q: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_read_query_result:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_bool>,
    pub mysql_real_query: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            q: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_shutdown: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            shutdown_level: mysql_enum_shutdown_level,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_dump_debug_info:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_int>,
    pub mysql_refresh: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            refresh_options: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_kill: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            pid: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_ping:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_int>,
    pub mysql_stat: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut ::std::os::raw::c_char,
    >,
    pub mysql_get_server_info: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut ::std::os::raw::c_char,
    >,
    pub mysql_get_server_version:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_ulong>,
    pub mysql_get_host_info: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut ::std::os::raw::c_char,
    >,
    pub mysql_get_proto_info:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_uint>,
    pub mysql_list_dbs: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            wild: *const ::std::os::raw::c_char,
        ) -> *mut MYSQL_RES,
    >,
    pub mysql_list_tables: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            wild: *const ::std::os::raw::c_char,
        ) -> *mut MYSQL_RES,
    >,
    pub mysql_list_fields: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            table: *const ::std::os::raw::c_char,
            wild: *const ::std::os::raw::c_char,
        ) -> *mut MYSQL_RES,
    >,
    pub mysql_list_processes:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut MYSQL_RES>,
    pub mysql_store_result:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut MYSQL_RES>,
    pub mysql_use_result:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut MYSQL_RES>,
    pub mysql_options: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            option: mysql_option,
            arg: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_free_result: ::std::option::Option<unsafe extern "C" fn(result: *mut MYSQL_RES)>,
    pub mysql_data_seek: ::std::option::Option<
        unsafe extern "C" fn(result: *mut MYSQL_RES, offset: ::std::os::raw::c_ulonglong),
    >,
    pub mysql_row_seek: ::std::option::Option<
        unsafe extern "C" fn(result: *mut MYSQL_RES, arg1: MYSQL_ROW_OFFSET) -> MYSQL_ROW_OFFSET,
    >,
    pub mysql_field_seek: ::std::option::Option<
        unsafe extern "C" fn(
            result: *mut MYSQL_RES,
            offset: MYSQL_FIELD_OFFSET,
        ) -> MYSQL_FIELD_OFFSET,
    >,
    pub mysql_fetch_row:
        ::std::option::Option<unsafe extern "C" fn(result: *mut MYSQL_RES) -> MYSQL_ROW>,
    pub mysql_fetch_lengths: ::std::option::Option<
        unsafe extern "C" fn(result: *mut MYSQL_RES) -> *mut ::std::os::raw::c_ulong,
    >,
    pub mysql_fetch_field:
        ::std::option::Option<unsafe extern "C" fn(result: *mut MYSQL_RES) -> *mut MYSQL_FIELD>,
    pub mysql_escape_string: ::std::option::Option<
        unsafe extern "C" fn(
            to: *mut ::std::os::raw::c_char,
            from: *const ::std::os::raw::c_char,
            from_length: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub mysql_real_escape_string: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            to: *mut ::std::os::raw::c_char,
            from: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub mysql_thread_safe: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub mysql_warning_count:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_uint>,
    pub mysql_sqlstate: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_server_init: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
            groups: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_server_end: ::std::option::Option<unsafe extern "C" fn()>,
    pub mysql_thread_end: ::std::option::Option<unsafe extern "C" fn()>,
    pub mysql_thread_init: ::std::option::Option<unsafe extern "C" fn() -> my_bool>,
    pub mysql_set_server_option: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            option: enum_mysql_set_option,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_get_client_info:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub mysql_get_client_version:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    pub mariadb_connection:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_bool>,
    pub mysql_get_server_name: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL) -> *const ::std::os::raw::c_char,
    >,
    pub mariadb_get_charset_by_name: ::std::option::Option<
        unsafe extern "C" fn(csname: *const ::std::os::raw::c_char) -> *mut MARIADB_CHARSET_INFO,
    >,
    pub mariadb_get_charset_by_nr: ::std::option::Option<
        unsafe extern "C" fn(csnr: ::std::os::raw::c_uint) -> *mut MARIADB_CHARSET_INFO,
    >,
    pub mariadb_convert_string: ::std::option::Option<
        unsafe extern "C" fn(
            from: *const ::std::os::raw::c_char,
            from_len: *mut size_t,
            from_cs: *mut MARIADB_CHARSET_INFO,
            to: *mut ::std::os::raw::c_char,
            to_len: *mut size_t,
            to_cs: *mut MARIADB_CHARSET_INFO,
            errorcode: *mut ::std::os::raw::c_int,
        ) -> size_t,
    >,
    pub mysql_optionsv: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL, option: mysql_option, ...) -> ::std::os::raw::c_int,
    >,
    pub mysql_get_optionv: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            option: mysql_option,
            arg: *mut ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_get_option: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            option: mysql_option,
            arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_hex_string: ::std::option::Option<
        unsafe extern "C" fn(
            to: *mut ::std::os::raw::c_char,
            from: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub mysql_get_socket:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_socket>,
    pub mysql_get_timeout_value:
        ::std::option::Option<unsafe extern "C" fn(mysql: *const MYSQL) -> ::std::os::raw::c_uint>,
    pub mysql_get_timeout_value_ms:
        ::std::option::Option<unsafe extern "C" fn(mysql: *const MYSQL) -> ::std::os::raw::c_uint>,
    pub mariadb_reconnect:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> my_bool>,
    pub mysql_stmt_init:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> *mut MYSQL_STMT>,
    pub mysql_stmt_prepare: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            query: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_stmt_execute:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int>,
    pub mysql_stmt_fetch:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int>,
    pub mysql_stmt_fetch_column: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            bind_arg: *mut MYSQL_BIND,
            column: ::std::os::raw::c_uint,
            offset: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_stmt_store_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int>,
    pub mysql_stmt_param_count: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulong,
    >,
    pub mysql_stmt_attr_set: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            attr_type: enum_stmt_attr_type,
            attr: *const ::std::os::raw::c_void,
        ) -> my_bool,
    >,
    pub mysql_stmt_attr_get: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            attr_type: enum_stmt_attr_type,
            attr: *mut ::std::os::raw::c_void,
        ) -> my_bool,
    >,
    pub mysql_stmt_bind_param: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT, bnd: *mut MYSQL_BIND) -> my_bool,
    >,
    pub mysql_stmt_bind_result: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT, bnd: *mut MYSQL_BIND) -> my_bool,
    >,
    pub mysql_stmt_close:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub mysql_stmt_reset:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub mysql_stmt_free_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub mysql_stmt_send_long_data: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            param_number: ::std::os::raw::c_uint,
            data: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_ulong,
        ) -> my_bool,
    >,
    pub mysql_stmt_result_metadata:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> *mut MYSQL_RES>,
    pub mysql_stmt_param_metadata:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> *mut MYSQL_RES>,
    pub mysql_stmt_errno: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_uint,
    >,
    pub mysql_stmt_error: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_stmt_sqlstate: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> *const ::std::os::raw::c_char,
    >,
    pub mysql_stmt_row_seek: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT, offset: MYSQL_ROW_OFFSET) -> MYSQL_ROW_OFFSET,
    >,
    pub mysql_stmt_row_tell:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> MYSQL_ROW_OFFSET>,
    pub mysql_stmt_data_seek: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT, offset: ::std::os::raw::c_ulonglong),
    >,
    pub mysql_stmt_num_rows: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulonglong,
    >,
    pub mysql_stmt_affected_rows: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulonglong,
    >,
    pub mysql_stmt_insert_id: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_ulonglong,
    >,
    pub mysql_stmt_field_count: ::std::option::Option<
        unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_uint,
    >,
    pub mysql_stmt_next_result:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int>,
    pub mysql_stmt_more_results:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub mariadb_stmt_execute_direct: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            stmtstr: *const ::std::os::raw::c_char,
            length: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mysql_reset_connection:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_st_mariadb_api() {
    assert_eq!(
        ::std::mem::size_of::<st_mariadb_api>(),
        920usize,
        concat!("Size of: ", stringify!(st_mariadb_api))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mariadb_api>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mariadb_api))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_num_rows as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_num_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_num_fields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_num_fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_eof as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_eof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_fetch_field_direct as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_fetch_field_direct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_fetch_fields as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_fetch_fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_row_tell as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_row_tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_field_tell as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_field_tell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_field_count as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_field_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_more_results as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_more_results)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_next_result as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_next_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_affected_rows as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_affected_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_autocommit as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_autocommit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_commit as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_commit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_rollback as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_rollback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_insert_id as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_insert_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_errno as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_error as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_info as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_thread_id as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_thread_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_character_set_name as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_character_set_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_character_set_info as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_character_set_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_set_character_set as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_set_character_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_get_infov as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_get_infov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_get_info as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_get_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_init as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_ssl_set as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_ssl_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_ssl_cipher as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_ssl_cipher)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_change_user as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_change_user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_real_connect as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_real_connect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_close as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_select_db as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_select_db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_query as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_send_query as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_send_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_read_query_result as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_read_query_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_real_query as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_real_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_shutdown as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_shutdown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_dump_debug_info as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_dump_debug_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_refresh as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_kill as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_ping as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_ping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stat as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_server_info as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_server_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_server_version as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_server_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_host_info as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_host_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_proto_info as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_proto_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_list_dbs as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_list_dbs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_list_tables as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_list_tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_list_fields as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_list_fields)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_list_processes as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_list_processes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_store_result as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_store_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_use_result as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_use_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_options as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_free_result as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_free_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_data_seek as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_data_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_row_seek as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_row_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_field_seek as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_field_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_fetch_row as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_fetch_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_fetch_lengths as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_fetch_lengths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_fetch_field as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_fetch_field)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_escape_string as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_escape_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_real_escape_string as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_real_escape_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_thread_safe as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_thread_safe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_warning_count as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_warning_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_sqlstate as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_sqlstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_server_init as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_server_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_server_end as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_server_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_thread_end as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_thread_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_thread_init as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_thread_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_set_server_option as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_set_server_option)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_client_info as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_client_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_client_version as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_client_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_connection as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_connection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_server_name as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_server_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_get_charset_by_name as *const _
                as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_get_charset_by_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_get_charset_by_nr as *const _
                as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_get_charset_by_nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_convert_string as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_convert_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_optionsv as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_optionsv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_optionv as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_optionv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_option as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_hex_string as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_hex_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_socket as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_socket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_timeout_value as *const _ as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_timeout_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_get_timeout_value_ms as *const _
                as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_get_timeout_value_ms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_reconnect as *const _ as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_reconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_init as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_prepare as *const _ as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_prepare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_execute as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_execute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_fetch as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_fetch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_fetch_column as *const _ as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_fetch_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_store_result as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_store_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_param_count as *const _ as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_param_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_attr_set as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_attr_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_attr_get as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_attr_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_bind_param as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_bind_param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_bind_result as *const _ as usize
        },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_bind_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_close as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_reset as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_reset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_free_result as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_free_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_send_long_data as *const _
                as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_send_long_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_result_metadata as *const _
                as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_result_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_param_metadata as *const _
                as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_param_metadata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_errno as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_error as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_sqlstate as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_sqlstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_row_seek as *const _ as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_row_seek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_row_tell as *const _ as usize
        },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_row_tell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_data_seek as *const _ as usize
        },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_data_seek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_num_rows as *const _ as usize
        },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_num_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_affected_rows as *const _ as usize
        },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_affected_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_insert_id as *const _ as usize
        },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_insert_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_field_count as *const _ as usize
        },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_field_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_next_result as *const _ as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_next_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_stmt_more_results as *const _ as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_stmt_more_results)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mariadb_stmt_execute_direct as *const _
                as usize
        },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mariadb_stmt_execute_direct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_api>())).mysql_reset_connection as *const _ as usize
        },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_api),
            "::",
            stringify!(mysql_reset_connection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mariadb_methods {
    pub db_connect: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            host: *const ::std::os::raw::c_char,
            user: *const ::std::os::raw::c_char,
            passwd: *const ::std::os::raw::c_char,
            db: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_uint,
            unix_socket: *const ::std::os::raw::c_char,
            clientflag: ::std::os::raw::c_ulong,
        ) -> *mut MYSQL,
    >,
    pub db_close: ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL)>,
    pub db_command: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            command: enum_server_command,
            arg: *const ::std::os::raw::c_char,
            length: size_t,
            skipp_check: my_bool,
            opt_arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_skip_result: ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL)>,
    pub db_read_query_result:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_int>,
    pub db_read_rows: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            fields: *mut MYSQL_FIELD,
            field_count: ::std::os::raw::c_uint,
        ) -> *mut MYSQL_DATA,
    >,
    pub db_read_one_row: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            fields: ::std::os::raw::c_uint,
            row: MYSQL_ROW,
            lengths: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_supported_buffer_type:
        ::std::option::Option<unsafe extern "C" fn(type_: enum_field_types) -> my_bool>,
    pub db_read_prepare_response:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub db_read_stmt_result:
        ::std::option::Option<unsafe extern "C" fn(mysql: *mut MYSQL) -> ::std::os::raw::c_int>,
    pub db_stmt_get_result_metadata:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub db_stmt_get_param_metadata:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> my_bool>,
    pub db_stmt_read_all_rows:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT) -> ::std::os::raw::c_int>,
    pub db_stmt_fetch: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            row: *mut *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_stmt_fetch_to_bind: ::std::option::Option<
        unsafe extern "C" fn(
            stmt: *mut MYSQL_STMT,
            row: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_stmt_flush_unbuffered:
        ::std::option::Option<unsafe extern "C" fn(stmt: *mut MYSQL_STMT)>,
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(
            mysql: *mut MYSQL,
            error_nr: ::std::os::raw::c_uint,
            sqlstate: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub invalidate_stmts: ::std::option::Option<
        unsafe extern "C" fn(mysql: *mut MYSQL, function_name: *const ::std::os::raw::c_char),
    >,
    pub api: *mut st_mariadb_api,
}
#[test]
fn bindgen_test_layout_st_mariadb_methods() {
    assert_eq!(
        ::std::mem::size_of::<st_mariadb_methods>(),
        152usize,
        concat!("Size of: ", stringify!(st_mariadb_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<st_mariadb_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(st_mariadb_methods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_methods>())).db_connect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_connect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_methods>())).db_close as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_methods>())).db_command as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_skip_result as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_skip_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_read_query_result as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_read_query_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_methods>())).db_read_rows as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_read_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_read_one_row as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_read_one_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_supported_buffer_type as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_supported_buffer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_read_prepare_response as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_read_prepare_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_read_stmt_result as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_read_stmt_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_stmt_get_result_metadata as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_stmt_get_result_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_stmt_get_param_metadata as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_stmt_get_param_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_stmt_read_all_rows as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_stmt_read_all_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_stmt_fetch as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_stmt_fetch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_stmt_fetch_to_bind as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_stmt_fetch_to_bind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).db_stmt_flush_unbuffered as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(db_stmt_flush_unbuffered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_methods>())).set_error as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(set_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_mariadb_methods>())).invalidate_stmts as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(invalidate_stmts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_mariadb_methods>())).api as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_mariadb_methods),
            "::",
            stringify!(api)
        )
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mariadb_net_extension {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_dynamic_array {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mysql_options_extension {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_mariadb_extension {
    pub _address: u8,
}
